//IP Functional Simulation Model
//VERSION_BEGIN 13.1 cbx_mgl 2013:10:23:18:06:54:SJ cbx_simgen 2013:10:23:18:05:48:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Altera disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = altsyncram 3 lut 199 mux21 113 oper_add 34 oper_less_than 3 oper_selector 5 
`timescale 1 ps / 1 ps
module  viterbi
	( 
	clk,
	decbit,
	eras_sym,
	normalizations,
	reset,
	rr,
	sink_rdy,
	sink_val,
	source_rdy,
	source_val) /* synthesis synthesis_clearbox=1 */;
	input   clk;
	output   decbit;
	input   [1:0]  eras_sym;
	output   [7:0]  normalizations;
	input   reset;
	input   [1:0]  rr;
	output   sink_rdy;
	input   sink_val;
	input   source_rdy;
	output   source_val;

	wire  [0:0]   wire_n000i_q_b;
	wire  [3:0]   wire_n001l_q_b;
	wire  [3:0]   wire_n001O_q_b;
	reg	nliO0l59;
	reg	nliO0l60;
	reg	nliO0O57;
	reg	nliO0O58;
	reg	nliOiO55;
	reg	nliOiO56;
	reg	nliOOl53;
	reg	nliOOl54;
	reg	nll00l33;
	reg	nll00l34;
	reg	nll00O31;
	reg	nll00O32;
	reg	nll01i37;
	reg	nll01i38;
	reg	nll01O35;
	reg	nll01O36;
	reg	nll0ii29;
	reg	nll0ii30;
	reg	nll0il27;
	reg	nll0il28;
	reg	nll0iO25;
	reg	nll0iO26;
	reg	nll0li23;
	reg	nll0li24;
	reg	nll0ll21;
	reg	nll0ll22;
	reg	nll0lO19;
	reg	nll0lO20;
	reg	nll0Oi17;
	reg	nll0Oi18;
	reg	nll0OO15;
	reg	nll0OO16;
	reg	nll11i51;
	reg	nll11i52;
	reg	nll11O49;
	reg	nll11O50;
	reg	nll1li47;
	reg	nll1li48;
	reg	nll1ll45;
	reg	nll1ll46;
	reg	nll1lO43;
	reg	nll1lO44;
	reg	nll1Oi41;
	reg	nll1Oi42;
	reg	nll1Ol39;
	reg	nll1Ol40;
	reg	nlli0O11;
	reg	nlli0O12;
	reg	nlli1i13;
	reg	nlli1i14;
	reg	nlliiO10;
	reg	nlliiO9;
	reg	nllili7;
	reg	nllili8;
	reg	nlliOi5;
	reg	nlliOi6;
	reg	nlliOO3;
	reg	nlliOO4;
	reg	nlll1l1;
	reg	nlll1l2;
	reg	n01iO;
	reg	n01li;
	reg	n01lO;
	reg	n1OiO;
	reg	n10ii;
	reg	n100i;
	reg	n100l;
	reg	n101l;
	reg	n101O;
	reg	n10iO;
	reg	nlllii;
	reg	nlllil;
	reg	nllliO;
	reg	nlllli;
	reg	nlllll;
	reg	nllllO;
	reg	nlllOi;
	reg	nlllOl;
	reg	nlllOO;
	reg	nllO1i;
	reg	nllO1l;
	reg	nlO10i;
	reg	nlO10l;
	reg	nlO10O;
	reg	nlO11O;
	reg	nlO1ii;
	reg	nlO1il;
	reg	nlO1iO;
	reg	nlO1li;
	reg	nlOi0i;
	reg	nlOi0l;
	reg	nlOi0O;
	reg	nlOi1O;
	reg	nlOiii;
	reg	nlOiil;
	reg	nlOiiO;
	reg	nlOO0i;
	reg	nlOO0l;
	reg	nlOO0O;
	reg	nlOO1l;
	reg	nlOO1O;
	reg	nlOOii;
	reg	nlOOil;
	reg	n10il_clk_prev;
	wire	wire_n10il_CLRN;
	wire	wire_n10il_PRN;
	reg	n10li;
	reg	n1l0i;
	reg	n1l0l;
	reg	n1l0O;
	reg	n1lii;
	reg	n1lil;
	reg	n1liO;
	reg	n1lli;
	reg	n1lll;
	reg	n1llO;
	reg	n1lOi;
	reg	n1lOl;
	reg	n1lOO;
	reg	n1O0i;
	reg	n1O0l;
	reg	n1O0O;
	reg	n1O1i;
	reg	n1O1l;
	reg	n1O1O;
	reg	n1Oil;
	wire	wire_n1Oii_CLRN;
	reg	niill;
	reg	niilO;
	reg	niiOl;
	reg	nil1i;
	reg	niiOO_clk_prev;
	wire	wire_niiOO_CLRN;
	reg	niOi;
	reg	nl00l;
	wire	wire_nilO_PRN;
	reg	ni01i;
	reg	niiOi;
	reg	nil1l;
	reg	nil1O;
	reg	nillO;
	reg	nilOi;
	reg	nilOl;
	reg	nilOO;
	reg	niO1i;
	reg	niO1O;
	reg	niO1l_clk_prev;
	wire	wire_niO1l_PRN;
	reg	niOO;
	reg	nlOOO;
	reg	n0O0i;
	reg	n0Oii;
	reg	ni10l;
	reg	ni1lO;
	reg	niOOi;
	reg	nl11l;
	wire	wire_nl11i_PRN;
	reg	n001i;
	reg	n01Oi;
	reg	n01Ol;
	reg	n01OO;
	reg	n0Oli;
	reg	n11i;
	reg	n11l;
	reg	n11O;
	reg	nili;
	reg	nill;
	reg	nl0Ol;
	reg	nl0OO;
	reg	nl1i;
	reg	nl1O;
	reg	nli1i;
	reg	nli1l;
	reg	nli1O;
	reg	nl0l;
	reg	nl0O;
	reg	nlii;
	reg	nliO;
	wire	wire_nlil_CLRN;
	reg	n0lii;
	reg	n0O0l;
	reg	n0O0O;
	reg	n0Oil;
	reg	n0OiO;
	reg	ni1iO;
	reg	ni1li;
	reg	ni1ll;
	reg	ni1Oi;
	reg	ni1Ol;
	reg	ni1OO;
	reg	niO0i;
	reg	niOOl;
	reg	niOOO;
	reg	nl00i;
	reg	nl01i;
	reg	nl01l;
	reg	nl01O;
	reg	nl10i;
	reg	nl10l;
	reg	nl11O;
	reg	nl1Ol;
	reg	nl1OO;
	reg	nli0i;
	reg	nli0l;
	reg	nllll;
	reg	nlllO;
	reg	nllOi;
	reg	nllOl;
	reg	nllOO;
	reg	nlO1l;
	reg	nlO1i_clk_prev;
	wire	wire_nlO1i_CLRN;
	wire	wire_nlO1i_PRN;
	wire	wire_n00i_dataout;
	wire	wire_n00l_dataout;
	wire	wire_n00ll_dataout;
	wire	wire_n00O_dataout;
	wire	wire_n01i_dataout;
	wire	wire_n01l_dataout;
	wire	wire_n01O_dataout;
	wire	wire_n0i0i_dataout;
	wire	wire_n0i0l_dataout;
	wire	wire_n0i0O_dataout;
	wire	wire_n0ii_dataout;
	wire	wire_n0iii_dataout;
	wire	wire_n0iil_dataout;
	wire	wire_n0iiO_dataout;
	wire	wire_n0il_dataout;
	wire	wire_n0ili_dataout;
	wire	wire_n0ill_dataout;
	wire	wire_n0ilO_dataout;
	wire	wire_n0iO_dataout;
	wire	wire_n0iOi_dataout;
	wire	wire_n0iOl_dataout;
	wire	wire_n0iOO_dataout;
	wire	wire_n0l0i_dataout;
	wire	wire_n0l1i_dataout;
	wire	wire_n0l1l_dataout;
	wire	wire_n0l1O_dataout;
	wire	wire_n0li_dataout;
	wire	wire_n0lil_dataout;
	wire	wire_n0liO_dataout;
	wire	wire_n0ll_dataout;
	wire	wire_n0lli_dataout;
	wire	wire_n0lll_dataout;
	wire	wire_n0llO_dataout;
	wire	wire_n0lO_dataout;
	wire	wire_n0lOi_dataout;
	wire	wire_n0lOl_dataout;
	wire	wire_n0Oi_dataout;
	wire	wire_n0Oll_dataout;
	wire	wire_n0OlO_dataout;
	wire	wire_n0OO_dataout;
	wire	wire_n0OOi_dataout;
	wire	wire_n0OOl_dataout;
	wire	wire_n0OOO_dataout;
	wire	wire_n10l_dataout;
	wire	wire_n1Oi_dataout;
	wire	wire_n1Ol_dataout;
	wire	wire_n1OO_dataout;
	wire	wire_ni0i_dataout;
	wire	wire_ni0l_dataout;
	wire	wire_ni0O_dataout;
	wire	wire_ni11i_dataout;
	wire	wire_ni11l_dataout;
	wire	wire_ni1i_dataout;
	wire	wire_ni1l_dataout;
	wire	wire_ni1O_dataout;
	wire	wire_niii_dataout;
	wire	wire_nil0i_dataout;
	wire	wire_nil0l_dataout;
	wire	wire_nil0O_dataout;
	wire	wire_nilii_dataout;
	wire	wire_nilil_dataout;
	wire	wire_niliO_dataout;
	wire	wire_nilli_dataout;
	wire	wire_niO0l_dataout;
	wire	wire_niO0O_dataout;
	wire	wire_niOii_dataout;
	wire	wire_niOil_dataout;
	wire	wire_niOiO_dataout;
	wire	wire_niOli_dataout;
	wire	wire_niOll_dataout;
	wire	wire_nl00O_dataout;
	wire	wire_nl0i_dataout;
	wire	wire_nl0ii_dataout;
	wire	wire_nl0il_dataout;
	wire	wire_nl0iO_dataout;
	wire	wire_nl0li_dataout;
	wire	wire_nl0ll_dataout;
	wire	wire_nl0lO_dataout;
	wire	wire_nl10O_dataout;
	wire	wire_nl1ii_dataout;
	wire	wire_nl1il_dataout;
	wire	wire_nl1iO_dataout;
	wire	wire_nl1li_dataout;
	wire	wire_nl1ll_dataout;
	wire	wire_nl1lO_dataout;
	wire	wire_nli0O_dataout;
	wire	wire_nliil_dataout;
	wire	wire_nliiO_dataout;
	wire	wire_nlili_dataout;
	wire	wire_nlill_dataout;
	wire	wire_nlilO_dataout;
	wire	wire_nliOi_dataout;
	wire	wire_nliOl_dataout;
	wire	wire_nliOO_dataout;
	wire	wire_nll0i_dataout;
	wire	wire_nll1i_dataout;
	wire	wire_nll1l_dataout;
	wire	wire_nll1O_dataout;
	wire	wire_nllO0i_dataout;
	wire	wire_nllO0l_dataout;
	wire	wire_nllO0O_dataout;
	wire	wire_nllO1O_dataout;
	wire	wire_nllOii_dataout;
	wire	wire_nllOil_dataout;
	wire	wire_nllOiO_dataout;
	wire	wire_nllOli_dataout;
	wire	wire_nlO0i_dataout;
	wire	wire_nlO0l_dataout;
	wire	wire_nlO0O_dataout;
	wire	wire_nlO1O_dataout;
	wire	wire_nlOii_dataout;
	wire	wire_nlOil_dataout;
	wire	wire_nlOiO_dataout;
	wire  [1:0]   wire_n011i_o;
	wire  [1:0]   wire_n011l_o;
	wire  [6:0]   wire_n0l0l_o;
	wire  [7:0]   wire_n0l0O_o;
	wire  [5:0]   wire_n0lOO_o;
	wire  [6:0]   wire_n0O1i_o;
	wire  [7:0]   wire_n11lO_o;
	wire  [5:0]   wire_n11Oi_o;
	wire  [5:0]   wire_n11Ol_o;
	wire  [7:0]   wire_n1iOl_o;
	wire  [5:0]   wire_n1iOO_o;
	wire  [5:0]   wire_n1l1i_o;
	wire  [3:0]   wire_n1Oli_o;
	wire  [3:0]   wire_n1Oll_o;
	wire  [3:0]   wire_n1OlO_o;
	wire  [3:0]   wire_n1OOi_o;
	wire  [1:0]   wire_n1OOl_o;
	wire  [1:0]   wire_n1OOO_o;
	wire  [6:0]   wire_ni10i_o;
	wire  [7:0]   wire_ni11O_o;
	wire  [6:0]   wire_nilll_o;
	wire  [6:0]   wire_niOlO_o;
	wire  [7:0]   wire_nl0Oi_o;
	wire  [7:0]   wire_nl1Oi_o;
	wire  [7:0]   wire_nllOll_o;
	wire  [7:0]   wire_nlO0Ol_o;
	wire  [6:0]   wire_nlO0OO_o;
	wire  [5:0]   wire_nlOi1i_o;
	wire  [5:0]   wire_nlOi1l_o;
	wire  [6:0]   wire_nlOli_o;
	wire  [7:0]   wire_nlOlOi_o;
	wire  [6:0]   wire_nlOlOl_o;
	wire  [5:0]   wire_nlOlOO_o;
	wire  [5:0]   wire_nlOO1i_o;
	wire  wire_n0O1l_o;
	wire  wire_n0O1O_o;
	wire  wire_nllli_o;
	wire  wire_n10O_o;
	wire  wire_n1ii_o;
	wire  wire_n1il_o;
	wire  wire_n1iO_o;
	wire  wire_n1ll_o;
	wire  nliO0i;
	wire  nliO1O;
	wire  nliOii;
	wire  nliOil;
	wire  nliOli;
	wire  nliOll;
	wire  nliOlO;
	wire  nliOOi;
	wire  nliOOO;
	wire  nll10i;
	wire  nll10l;
	wire  nll10O;
	wire  nll11l;
	wire  nll1ii;
	wire  nll1il;
	wire  nll1iO;
	wire  nll1OO;
	wire  nlli0i;
	wire  nlli0l;
	wire  nlli1O;
	wire  nlliil;
	wire  nllilO;
	wire  nlliOl;
	wire  nlll0O;

	altsyncram   n000i
	( 
	.address_a({n0OiO, n0Oil, n0Oii, n0O0O, n0O0l, n0O0i, n0lii}),
	.address_b({wire_n0ili_dataout, wire_n0iiO_dataout, wire_n0iil_dataout, wire_n0iii_dataout, wire_n0i0O_dataout, wire_n0i0l_dataout, wire_n0i0i_dataout}),
	.clock0(clk),
	.clock1(clk),
	.clocken1(nll1OO),
	.data_a({(((ni1OO | ni1Ol) & (~ wire_n0ill_dataout)) | ((ni1ll | ni1li) & wire_n0ill_dataout))}),
	.eccstatus(),
	.q_a(),
	.q_b(wire_n000i_q_b),
	.wren_a(1'b1),
	.aclr0(),
	.aclr1(),
	.addressstall_a(),
	.addressstall_b(),
	.byteena_a(),
	.byteena_b(),
	.clocken0(),
	.clocken2(),
	.clocken3(),
	.data_b(),
	.rden_a(),
	.rden_b(),
	.wren_b()
	);
	defparam
		n000i.address_aclr_a = "NONE",
		n000i.address_aclr_b = "NONE",
		n000i.address_reg_b = "CLOCK1",
		n000i.byte_size = 8,
		n000i.byteena_aclr_a = "NONE",
		n000i.byteena_aclr_b = "NONE",
		n000i.byteena_reg_b = "CLOCK1",
		n000i.clock_enable_core_a = "USE_INPUT_CLKEN",
		n000i.clock_enable_core_b = "USE_INPUT_CLKEN",
		n000i.clock_enable_input_a = "NORMAL",
		n000i.clock_enable_input_b = "NORMAL",
		n000i.clock_enable_output_a = "NORMAL",
		n000i.clock_enable_output_b = "NORMAL",
		n000i.ecc_pipeline_stage_enabled = "FALSE",
		n000i.enable_ecc = "FALSE",
		n000i.indata_aclr_a = "NONE",
		n000i.indata_aclr_b = "NONE",
		n000i.indata_reg_b = "CLOCK1",
		n000i.init_file_layout = "PORT_A",
		n000i.intended_device_family = "Cyclone III",
		n000i.numwords_a = 72,
		n000i.numwords_b = 72,
		n000i.operation_mode = "DUAL_PORT",
		n000i.outdata_aclr_a = "NONE",
		n000i.outdata_aclr_b = "NONE",
		n000i.outdata_reg_a = "UNREGISTERED",
		n000i.outdata_reg_b = "CLOCK1",
		n000i.ram_block_type = "AUTO",
		n000i.rdcontrol_aclr_b = "NONE",
		n000i.rdcontrol_reg_b = "CLOCK1",
		n000i.read_during_write_mode_mixed_ports = "DONT_CARE",
		n000i.read_during_write_mode_port_a = "NEW_DATA_NO_NBE_READ",
		n000i.read_during_write_mode_port_b = "NEW_DATA_NO_NBE_READ",
		n000i.width_a = 1,
		n000i.width_b = 1,
		n000i.width_byteena_a = 1,
		n000i.width_byteena_b = 1,
		n000i.width_eccstatus = 3,
		n000i.widthad_a = 7,
		n000i.widthad_b = 7,
		n000i.wrcontrol_aclr_a = "NONE",
		n000i.wrcontrol_aclr_b = "NONE",
		n000i.wrcontrol_wraddress_reg_b = "CLOCK1",
		n000i.lpm_hint = "WIDTH_BYTEENA=1";
	altsyncram   n001l
	( 
	.address_a({niO1O, niO1i, nilOO, nilOl, nilOi, nillO, nil1O}),
	.address_b({nl00i, nl01O, nl01l, nl01i, nl1OO, nl1Ol, nl10l}),
	.clock0(clk),
	.clock1(clk),
	.clocken1(nll1OO),
	.data_a({nllO1l, nlO1li, nlOiiO, nlOOil}),
	.eccstatus(),
	.q_a(),
	.q_b(wire_n001l_q_b),
	.wren_a(n01Oi),
	.aclr0(),
	.aclr1(),
	.addressstall_a(),
	.addressstall_b(),
	.byteena_a(),
	.byteena_b(),
	.clocken0(),
	.clocken2(),
	.clocken3(),
	.data_b(),
	.rden_a(),
	.rden_b(),
	.wren_b()
	);
	defparam
		n001l.address_aclr_a = "NONE",
		n001l.address_aclr_b = "NONE",
		n001l.address_reg_b = "CLOCK1",
		n001l.byte_size = 8,
		n001l.byteena_aclr_a = "NONE",
		n001l.byteena_aclr_b = "NONE",
		n001l.byteena_reg_b = "CLOCK1",
		n001l.clock_enable_core_a = "USE_INPUT_CLKEN",
		n001l.clock_enable_core_b = "USE_INPUT_CLKEN",
		n001l.clock_enable_input_a = "NORMAL",
		n001l.clock_enable_input_b = "NORMAL",
		n001l.clock_enable_output_a = "NORMAL",
		n001l.clock_enable_output_b = "NORMAL",
		n001l.ecc_pipeline_stage_enabled = "FALSE",
		n001l.enable_ecc = "FALSE",
		n001l.indata_aclr_a = "NONE",
		n001l.indata_aclr_b = "NONE",
		n001l.indata_reg_b = "CLOCK1",
		n001l.init_file_layout = "PORT_A",
		n001l.intended_device_family = "Cyclone III",
		n001l.numwords_a = 72,
		n001l.numwords_b = 72,
		n001l.operation_mode = "DUAL_PORT",
		n001l.outdata_aclr_a = "NONE",
		n001l.outdata_aclr_b = "NONE",
		n001l.outdata_reg_a = "UNREGISTERED",
		n001l.outdata_reg_b = "CLOCK1",
		n001l.ram_block_type = "AUTO",
		n001l.rdcontrol_aclr_b = "NONE",
		n001l.rdcontrol_reg_b = "CLOCK1",
		n001l.read_during_write_mode_mixed_ports = "OLD_DATA",
		n001l.read_during_write_mode_port_a = "NEW_DATA_NO_NBE_READ",
		n001l.read_during_write_mode_port_b = "NEW_DATA_NO_NBE_READ",
		n001l.width_a = 4,
		n001l.width_b = 4,
		n001l.width_byteena_a = 1,
		n001l.width_byteena_b = 1,
		n001l.width_eccstatus = 3,
		n001l.widthad_a = 7,
		n001l.widthad_b = 7,
		n001l.wrcontrol_aclr_a = "NONE",
		n001l.wrcontrol_aclr_b = "NONE",
		n001l.wrcontrol_wraddress_reg_b = "CLOCK1",
		n001l.lpm_hint = "WIDTH_BYTEENA=1";
	altsyncram   n001O
	( 
	.address_a({nil1l, nil1i, niiOl, niiOi, niilO, niill, ni01i}),
	.address_b({nl10i, nl11O, nl11l, niOOO, niOOl, niOOi, niO0i}),
	.clock0(clk),
	.clock1(clk),
	.clocken1(nll1OO),
	.data_a({nllO1l, nlO1li, nlOiiO, nlOOil}),
	.eccstatus(),
	.q_a(),
	.q_b(wire_n001O_q_b),
	.wren_a(n01Oi),
	.aclr0(),
	.aclr1(),
	.addressstall_a(),
	.addressstall_b(),
	.byteena_a(),
	.byteena_b(),
	.clocken0(),
	.clocken2(),
	.clocken3(),
	.data_b(),
	.rden_a(),
	.rden_b(),
	.wren_b()
	);
	defparam
		n001O.address_aclr_a = "NONE",
		n001O.address_aclr_b = "NONE",
		n001O.address_reg_b = "CLOCK1",
		n001O.byte_size = 8,
		n001O.byteena_aclr_a = "NONE",
		n001O.byteena_aclr_b = "NONE",
		n001O.byteena_reg_b = "CLOCK1",
		n001O.clock_enable_core_a = "USE_INPUT_CLKEN",
		n001O.clock_enable_core_b = "USE_INPUT_CLKEN",
		n001O.clock_enable_input_a = "NORMAL",
		n001O.clock_enable_input_b = "NORMAL",
		n001O.clock_enable_output_a = "NORMAL",
		n001O.clock_enable_output_b = "NORMAL",
		n001O.ecc_pipeline_stage_enabled = "FALSE",
		n001O.enable_ecc = "FALSE",
		n001O.indata_aclr_a = "NONE",
		n001O.indata_aclr_b = "NONE",
		n001O.indata_reg_b = "CLOCK1",
		n001O.init_file_layout = "PORT_A",
		n001O.intended_device_family = "Cyclone III",
		n001O.numwords_a = 72,
		n001O.numwords_b = 72,
		n001O.operation_mode = "DUAL_PORT",
		n001O.outdata_aclr_a = "NONE",
		n001O.outdata_aclr_b = "NONE",
		n001O.outdata_reg_a = "UNREGISTERED",
		n001O.outdata_reg_b = "CLOCK1",
		n001O.ram_block_type = "AUTO",
		n001O.rdcontrol_aclr_b = "NONE",
		n001O.rdcontrol_reg_b = "CLOCK1",
		n001O.read_during_write_mode_mixed_ports = "OLD_DATA",
		n001O.read_during_write_mode_port_a = "NEW_DATA_NO_NBE_READ",
		n001O.read_during_write_mode_port_b = "NEW_DATA_NO_NBE_READ",
		n001O.width_a = 4,
		n001O.width_b = 4,
		n001O.width_byteena_a = 1,
		n001O.width_byteena_b = 1,
		n001O.width_eccstatus = 3,
		n001O.widthad_a = 7,
		n001O.widthad_b = 7,
		n001O.wrcontrol_aclr_a = "NONE",
		n001O.wrcontrol_aclr_b = "NONE",
		n001O.wrcontrol_wraddress_reg_b = "CLOCK1",
		n001O.lpm_hint = "WIDTH_BYTEENA=1";
	initial
		nliO0l59 = 0;
	always @ ( posedge clk)
		  nliO0l59 <= nliO0l60;
	event nliO0l59_event;
	initial
		#1 ->nliO0l59_event;
	always @(nliO0l59_event)
		nliO0l59 <= {1{1'b1}};
	initial
		nliO0l60 = 0;
	always @ ( posedge clk)
		  nliO0l60 <= nliO0l59;
	initial
		nliO0O57 = 0;
	always @ ( posedge clk)
		  nliO0O57 <= nliO0O58;
	event nliO0O57_event;
	initial
		#1 ->nliO0O57_event;
	always @(nliO0O57_event)
		nliO0O57 <= {1{1'b1}};
	initial
		nliO0O58 = 0;
	always @ ( posedge clk)
		  nliO0O58 <= nliO0O57;
	initial
		nliOiO55 = 0;
	always @ ( posedge clk)
		  nliOiO55 <= nliOiO56;
	event nliOiO55_event;
	initial
		#1 ->nliOiO55_event;
	always @(nliOiO55_event)
		nliOiO55 <= {1{1'b1}};
	initial
		nliOiO56 = 0;
	always @ ( posedge clk)
		  nliOiO56 <= nliOiO55;
	initial
		nliOOl53 = 0;
	always @ ( posedge clk)
		  nliOOl53 <= nliOOl54;
	event nliOOl53_event;
	initial
		#1 ->nliOOl53_event;
	always @(nliOOl53_event)
		nliOOl53 <= {1{1'b1}};
	initial
		nliOOl54 = 0;
	always @ ( posedge clk)
		  nliOOl54 <= nliOOl53;
	initial
		nll00l33 = 0;
	always @ ( posedge clk)
		  nll00l33 <= nll00l34;
	event nll00l33_event;
	initial
		#1 ->nll00l33_event;
	always @(nll00l33_event)
		nll00l33 <= {1{1'b1}};
	initial
		nll00l34 = 0;
	always @ ( posedge clk)
		  nll00l34 <= nll00l33;
	initial
		nll00O31 = 0;
	always @ ( posedge clk)
		  nll00O31 <= nll00O32;
	event nll00O31_event;
	initial
		#1 ->nll00O31_event;
	always @(nll00O31_event)
		nll00O31 <= {1{1'b1}};
	initial
		nll00O32 = 0;
	always @ ( posedge clk)
		  nll00O32 <= nll00O31;
	initial
		nll01i37 = 0;
	always @ ( posedge clk)
		  nll01i37 <= nll01i38;
	event nll01i37_event;
	initial
		#1 ->nll01i37_event;
	always @(nll01i37_event)
		nll01i37 <= {1{1'b1}};
	initial
		nll01i38 = 0;
	always @ ( posedge clk)
		  nll01i38 <= nll01i37;
	initial
		nll01O35 = 0;
	always @ ( posedge clk)
		  nll01O35 <= nll01O36;
	event nll01O35_event;
	initial
		#1 ->nll01O35_event;
	always @(nll01O35_event)
		nll01O35 <= {1{1'b1}};
	initial
		nll01O36 = 0;
	always @ ( posedge clk)
		  nll01O36 <= nll01O35;
	initial
		nll0ii29 = 0;
	always @ ( posedge clk)
		  nll0ii29 <= nll0ii30;
	event nll0ii29_event;
	initial
		#1 ->nll0ii29_event;
	always @(nll0ii29_event)
		nll0ii29 <= {1{1'b1}};
	initial
		nll0ii30 = 0;
	always @ ( posedge clk)
		  nll0ii30 <= nll0ii29;
	initial
		nll0il27 = 0;
	always @ ( posedge clk)
		  nll0il27 <= nll0il28;
	event nll0il27_event;
	initial
		#1 ->nll0il27_event;
	always @(nll0il27_event)
		nll0il27 <= {1{1'b1}};
	initial
		nll0il28 = 0;
	always @ ( posedge clk)
		  nll0il28 <= nll0il27;
	initial
		nll0iO25 = 0;
	always @ ( posedge clk)
		  nll0iO25 <= nll0iO26;
	event nll0iO25_event;
	initial
		#1 ->nll0iO25_event;
	always @(nll0iO25_event)
		nll0iO25 <= {1{1'b1}};
	initial
		nll0iO26 = 0;
	always @ ( posedge clk)
		  nll0iO26 <= nll0iO25;
	initial
		nll0li23 = 0;
	always @ ( posedge clk)
		  nll0li23 <= nll0li24;
	event nll0li23_event;
	initial
		#1 ->nll0li23_event;
	always @(nll0li23_event)
		nll0li23 <= {1{1'b1}};
	initial
		nll0li24 = 0;
	always @ ( posedge clk)
		  nll0li24 <= nll0li23;
	initial
		nll0ll21 = 0;
	always @ ( posedge clk)
		  nll0ll21 <= nll0ll22;
	event nll0ll21_event;
	initial
		#1 ->nll0ll21_event;
	always @(nll0ll21_event)
		nll0ll21 <= {1{1'b1}};
	initial
		nll0ll22 = 0;
	always @ ( posedge clk)
		  nll0ll22 <= nll0ll21;
	initial
		nll0lO19 = 0;
	always @ ( posedge clk)
		  nll0lO19 <= nll0lO20;
	event nll0lO19_event;
	initial
		#1 ->nll0lO19_event;
	always @(nll0lO19_event)
		nll0lO19 <= {1{1'b1}};
	initial
		nll0lO20 = 0;
	always @ ( posedge clk)
		  nll0lO20 <= nll0lO19;
	initial
		nll0Oi17 = 0;
	always @ ( posedge clk)
		  nll0Oi17 <= nll0Oi18;
	event nll0Oi17_event;
	initial
		#1 ->nll0Oi17_event;
	always @(nll0Oi17_event)
		nll0Oi17 <= {1{1'b1}};
	initial
		nll0Oi18 = 0;
	always @ ( posedge clk)
		  nll0Oi18 <= nll0Oi17;
	initial
		nll0OO15 = 0;
	always @ ( posedge clk)
		  nll0OO15 <= nll0OO16;
	event nll0OO15_event;
	initial
		#1 ->nll0OO15_event;
	always @(nll0OO15_event)
		nll0OO15 <= {1{1'b1}};
	initial
		nll0OO16 = 0;
	always @ ( posedge clk)
		  nll0OO16 <= nll0OO15;
	initial
		nll11i51 = 0;
	always @ ( posedge clk)
		  nll11i51 <= nll11i52;
	event nll11i51_event;
	initial
		#1 ->nll11i51_event;
	always @(nll11i51_event)
		nll11i51 <= {1{1'b1}};
	initial
		nll11i52 = 0;
	always @ ( posedge clk)
		  nll11i52 <= nll11i51;
	initial
		nll11O49 = 0;
	always @ ( posedge clk)
		  nll11O49 <= nll11O50;
	event nll11O49_event;
	initial
		#1 ->nll11O49_event;
	always @(nll11O49_event)
		nll11O49 <= {1{1'b1}};
	initial
		nll11O50 = 0;
	always @ ( posedge clk)
		  nll11O50 <= nll11O49;
	initial
		nll1li47 = 0;
	always @ ( posedge clk)
		  nll1li47 <= nll1li48;
	event nll1li47_event;
	initial
		#1 ->nll1li47_event;
	always @(nll1li47_event)
		nll1li47 <= {1{1'b1}};
	initial
		nll1li48 = 0;
	always @ ( posedge clk)
		  nll1li48 <= nll1li47;
	initial
		nll1ll45 = 0;
	always @ ( posedge clk)
		  nll1ll45 <= nll1ll46;
	event nll1ll45_event;
	initial
		#1 ->nll1ll45_event;
	always @(nll1ll45_event)
		nll1ll45 <= {1{1'b1}};
	initial
		nll1ll46 = 0;
	always @ ( posedge clk)
		  nll1ll46 <= nll1ll45;
	initial
		nll1lO43 = 0;
	always @ ( posedge clk)
		  nll1lO43 <= nll1lO44;
	event nll1lO43_event;
	initial
		#1 ->nll1lO43_event;
	always @(nll1lO43_event)
		nll1lO43 <= {1{1'b1}};
	initial
		nll1lO44 = 0;
	always @ ( posedge clk)
		  nll1lO44 <= nll1lO43;
	initial
		nll1Oi41 = 0;
	always @ ( posedge clk)
		  nll1Oi41 <= nll1Oi42;
	event nll1Oi41_event;
	initial
		#1 ->nll1Oi41_event;
	always @(nll1Oi41_event)
		nll1Oi41 <= {1{1'b1}};
	initial
		nll1Oi42 = 0;
	always @ ( posedge clk)
		  nll1Oi42 <= nll1Oi41;
	initial
		nll1Ol39 = 0;
	always @ ( posedge clk)
		  nll1Ol39 <= nll1Ol40;
	event nll1Ol39_event;
	initial
		#1 ->nll1Ol39_event;
	always @(nll1Ol39_event)
		nll1Ol39 <= {1{1'b1}};
	initial
		nll1Ol40 = 0;
	always @ ( posedge clk)
		  nll1Ol40 <= nll1Ol39;
	initial
		nlli0O11 = 0;
	always @ ( posedge clk)
		  nlli0O11 <= nlli0O12;
	event nlli0O11_event;
	initial
		#1 ->nlli0O11_event;
	always @(nlli0O11_event)
		nlli0O11 <= {1{1'b1}};
	initial
		nlli0O12 = 0;
	always @ ( posedge clk)
		  nlli0O12 <= nlli0O11;
	initial
		nlli1i13 = 0;
	always @ ( posedge clk)
		  nlli1i13 <= nlli1i14;
	event nlli1i13_event;
	initial
		#1 ->nlli1i13_event;
	always @(nlli1i13_event)
		nlli1i13 <= {1{1'b1}};
	initial
		nlli1i14 = 0;
	always @ ( posedge clk)
		  nlli1i14 <= nlli1i13;
	initial
		nlliiO10 = 0;
	always @ ( posedge clk)
		  nlliiO10 <= nlliiO9;
	initial
		nlliiO9 = 0;
	always @ ( posedge clk)
		  nlliiO9 <= nlliiO10;
	event nlliiO9_event;
	initial
		#1 ->nlliiO9_event;
	always @(nlliiO9_event)
		nlliiO9 <= {1{1'b1}};
	initial
		nllili7 = 0;
	always @ ( posedge clk)
		  nllili7 <= nllili8;
	event nllili7_event;
	initial
		#1 ->nllili7_event;
	always @(nllili7_event)
		nllili7 <= {1{1'b1}};
	initial
		nllili8 = 0;
	always @ ( posedge clk)
		  nllili8 <= nllili7;
	initial
		nlliOi5 = 0;
	always @ ( posedge clk)
		  nlliOi5 <= nlliOi6;
	event nlliOi5_event;
	initial
		#1 ->nlliOi5_event;
	always @(nlliOi5_event)
		nlliOi5 <= {1{1'b1}};
	initial
		nlliOi6 = 0;
	always @ ( posedge clk)
		  nlliOi6 <= nlliOi5;
	initial
		nlliOO3 = 0;
	always @ ( posedge clk)
		  nlliOO3 <= nlliOO4;
	event nlliOO3_event;
	initial
		#1 ->nlliOO3_event;
	always @(nlliOO3_event)
		nlliOO3 <= {1{1'b1}};
	initial
		nlliOO4 = 0;
	always @ ( posedge clk)
		  nlliOO4 <= nlliOO3;
	initial
		nlll1l1 = 0;
	always @ ( posedge clk)
		  nlll1l1 <= nlll1l2;
	event nlll1l1_event;
	initial
		#1 ->nlll1l1_event;
	always @(nlll1l1_event)
		nlll1l1 <= {1{1'b1}};
	initial
		nlll1l2 = 0;
	always @ ( posedge clk)
		  nlll1l2 <= nlll1l1;
	initial
	begin
		n01iO = 0;
		n01li = 0;
		n01lO = 0;
		n1OiO = 0;
	end
	always @ ( posedge clk or  posedge reset)
	begin
		if (reset == 1'b1) 
		begin
			n01iO <= 0;
			n01li <= 0;
			n01lO <= 0;
			n1OiO <= 0;
		end
		else if  (n001i == 1'b1) 
		begin
			n01iO <= nl0O;
			n01li <= nlii;
			n01lO <= nliO;
			n1OiO <= nl0l;
		end
	end
	event n01iO_event;
	event n01li_event;
	event n01lO_event;
	event n1OiO_event;
	initial
		#1 ->n01iO_event;
	initial
		#1 ->n01li_event;
	initial
		#1 ->n01lO_event;
	initial
		#1 ->n1OiO_event;
	always @(n01iO_event)
		n01iO <= 1;
	always @(n01li_event)
		n01li <= 1;
	always @(n01lO_event)
		n01lO <= 1;
	always @(n1OiO_event)
		n1OiO <= 1;
	initial
	begin
		n10ii = 0;
	end
	always @ ( posedge clk or  posedge reset)
	begin
		if (reset == 1'b1) 
		begin
			n10ii <= 1;
		end
		else if  (n01Ol == 1'b1) 
		begin
			n10ii <= ((wire_n1l1i_o[4] & (~ wire_n1iOl_o[7])) | (wire_n1iOO_o[4] & wire_n1iOl_o[7]));
		end
	end
	event n10ii_event;
	initial
		#1 ->n10ii_event;
	always @(n10ii_event)
		n10ii <= 1;
	initial
	begin
		n100i = 0;
		n100l = 0;
		n101l = 0;
		n101O = 0;
		n10iO = 0;
		nlllii = 0;
		nlllil = 0;
		nllliO = 0;
		nlllli = 0;
		nlllll = 0;
		nllllO = 0;
		nlllOi = 0;
		nlllOl = 0;
		nlllOO = 0;
		nllO1i = 0;
		nllO1l = 0;
		nlO10i = 0;
		nlO10l = 0;
		nlO10O = 0;
		nlO11O = 0;
		nlO1ii = 0;
		nlO1il = 0;
		nlO1iO = 0;
		nlO1li = 0;
		nlOi0i = 0;
		nlOi0l = 0;
		nlOi0O = 0;
		nlOi1O = 0;
		nlOiii = 0;
		nlOiil = 0;
		nlOiiO = 0;
		nlOO0i = 0;
		nlOO0l = 0;
		nlOO0O = 0;
		nlOO1l = 0;
		nlOO1O = 0;
		nlOOii = 0;
		nlOOil = 0;
	end
	always @ (clk or wire_n10il_PRN or wire_n10il_CLRN)
	begin
		if (wire_n10il_PRN == 1'b0) 
		begin
			n100i <= 1;
			n100l <= 1;
			n101l <= 1;
			n101O <= 1;
			n10iO <= 1;
			nlllii <= 1;
			nlllil <= 1;
			nllliO <= 1;
			nlllli <= 1;
			nlllll <= 1;
			nllllO <= 1;
			nlllOi <= 1;
			nlllOl <= 1;
			nlllOO <= 1;
			nllO1i <= 1;
			nllO1l <= 1;
			nlO10i <= 1;
			nlO10l <= 1;
			nlO10O <= 1;
			nlO11O <= 1;
			nlO1ii <= 1;
			nlO1il <= 1;
			nlO1iO <= 1;
			nlO1li <= 1;
			nlOi0i <= 1;
			nlOi0l <= 1;
			nlOi0O <= 1;
			nlOi1O <= 1;
			nlOiii <= 1;
			nlOiil <= 1;
			nlOiiO <= 1;
			nlOO0i <= 1;
			nlOO0l <= 1;
			nlOO0O <= 1;
			nlOO1l <= 1;
			nlOO1O <= 1;
			nlOOii <= 1;
			nlOOil <= 1;
		end
		else if  (wire_n10il_CLRN == 1'b0) 
		begin
			n100i <= 0;
			n100l <= 0;
			n101l <= 0;
			n101O <= 0;
			n10iO <= 0;
			nlllii <= 0;
			nlllil <= 0;
			nllliO <= 0;
			nlllli <= 0;
			nlllll <= 0;
			nllllO <= 0;
			nlllOi <= 0;
			nlllOl <= 0;
			nlllOO <= 0;
			nllO1i <= 0;
			nllO1l <= 0;
			nlO10i <= 0;
			nlO10l <= 0;
			nlO10O <= 0;
			nlO11O <= 0;
			nlO1ii <= 0;
			nlO1il <= 0;
			nlO1iO <= 0;
			nlO1li <= 0;
			nlOi0i <= 0;
			nlOi0l <= 0;
			nlOi0O <= 0;
			nlOi1O <= 0;
			nlOiii <= 0;
			nlOiil <= 0;
			nlOiiO <= 0;
			nlOO0i <= 0;
			nlOO0l <= 0;
			nlOO0O <= 0;
			nlOO1l <= 0;
			nlOO1O <= 0;
			nlOOii <= 0;
			nlOOil <= 0;
		end
		else if  (n01Ol == 1'b1) 
		if (clk != n10il_clk_prev && clk == 1'b1) 
		begin
			n100i <= ((wire_n1l1i_o[2] & (~ wire_n1iOl_o[7])) | (wire_n1iOO_o[2] & wire_n1iOl_o[7]));
			n100l <= ((wire_n1l1i_o[3] & (~ wire_n1iOl_o[7])) | (wire_n1iOO_o[3] & wire_n1iOl_o[7]));
			n101l <= ((wire_n1l1i_o[0] & (~ wire_n1iOl_o[7])) | (wire_n1iOO_o[0] & wire_n1iOl_o[7]));
			n101O <= ((wire_n1l1i_o[1] & (~ wire_n1iOl_o[7])) | (wire_n1iOO_o[1] & wire_n1iOl_o[7]));
			n10iO <= ((wire_n1l1i_o[5] & (~ wire_n1iOl_o[7])) | (wire_n1iOO_o[5] & wire_n1iOl_o[7]));
			nlllii <= wire_nllO0i_dataout;
			nlllil <= wire_nllO0l_dataout;
			nllliO <= wire_nllO0O_dataout;
			nlllli <= wire_nllOii_dataout;
			nlllll <= wire_nllOil_dataout;
			nllllO <= wire_nllOiO_dataout;
			nlllOi <= wire_nllOli_dataout;
			nlllOl <= ((n10iO & nlOOii) & (~ nllO1i));
			nlllOO <= ((nlOiil & nlO1il) & (~ nllO1i));
			nllO1i <= ((nlllOO & nlllOl) & (~ nllO1i));
			nllO1l <= wire_nlO0Ol_o[7];
			nlO10i <= ((wire_nlOi1l_o[1] & (~ wire_nlO0Ol_o[7])) | (wire_nlOi1i_o[1] & wire_nlO0Ol_o[7]));
			nlO10l <= ((wire_nlOi1l_o[2] & (~ wire_nlO0Ol_o[7])) | (wire_nlOi1i_o[2] & wire_nlO0Ol_o[7]));
			nlO10O <= ((wire_nlOi1l_o[3] & (~ wire_nlO0Ol_o[7])) | (wire_nlOi1i_o[3] & wire_nlO0Ol_o[7]));
			nlO11O <= ((wire_nlOi1l_o[0] & (~ wire_nlO0Ol_o[7])) | (wire_nlOi1i_o[0] & wire_nlO0Ol_o[7]));
			nlO1ii <= ((wire_nlOi1l_o[4] & (~ wire_nlO0Ol_o[7])) | (wire_nlOi1i_o[4] & wire_nlO0Ol_o[7]));
			nlO1il <= ((wire_nlOi1l_o[5] & (~ wire_nlO0Ol_o[7])) | (wire_nlOi1i_o[5] & wire_nlO0Ol_o[7]));
			nlO1iO <= wire_nllO1O_dataout;
			nlO1li <= wire_nlOlOi_o[7];
			nlOi0i <= ((wire_nlOO1i_o[1] & (~ wire_nlOlOi_o[7])) | (wire_nlOlOO_o[1] & wire_nlOlOi_o[7]));
			nlOi0l <= ((wire_nlOO1i_o[2] & (~ wire_nlOlOi_o[7])) | (wire_nlOlOO_o[2] & wire_nlOlOi_o[7]));
			nlOi0O <= ((wire_nlOO1i_o[3] & (~ wire_nlOlOi_o[7])) | (wire_nlOlOO_o[3] & wire_nlOlOi_o[7]));
			nlOi1O <= ((wire_nlOO1i_o[0] & (~ wire_nlOlOi_o[7])) | (wire_nlOlOO_o[0] & wire_nlOlOi_o[7]));
			nlOiii <= ((wire_nlOO1i_o[4] & (~ wire_nlOlOi_o[7])) | (wire_nlOlOO_o[4] & wire_nlOlOi_o[7]));
			nlOiil <= ((wire_nlOO1i_o[5] & (~ wire_nlOlOi_o[7])) | (wire_nlOlOO_o[5] & wire_nlOlOi_o[7]));
			nlOiiO <= wire_n11lO_o[7];
			nlOO0i <= ((wire_n11Ol_o[2] & (~ wire_n11lO_o[7])) | (wire_n11Oi_o[2] & wire_n11lO_o[7]));
			nlOO0l <= ((wire_n11Ol_o[3] & (~ wire_n11lO_o[7])) | (wire_n11Oi_o[3] & wire_n11lO_o[7]));
			nlOO0O <= ((wire_n11Ol_o[4] & (~ wire_n11lO_o[7])) | (wire_n11Oi_o[4] & wire_n11lO_o[7]));
			nlOO1l <= ((wire_n11Ol_o[0] & (~ wire_n11lO_o[7])) | (wire_n11Oi_o[0] & wire_n11lO_o[7]));
			nlOO1O <= ((wire_n11Ol_o[1] & (~ wire_n11lO_o[7])) | (wire_n11Oi_o[1] & wire_n11lO_o[7]));
			nlOOii <= ((wire_n11Ol_o[5] & (~ wire_n11lO_o[7])) | (wire_n11Oi_o[5] & wire_n11lO_o[7]));
			nlOOil <= wire_n1iOl_o[7];
		end
		n10il_clk_prev <= clk;
	end
	assign
		wire_n10il_CLRN = ((nliO0O58 ^ nliO0O57) & (~ reset)),
		wire_n10il_PRN = (nliO0l60 ^ nliO0l59);
	event n100i_event;
	event n100l_event;
	event n101l_event;
	event n101O_event;
	event n10iO_event;
	event nlllii_event;
	event nlllil_event;
	event nllliO_event;
	event nlllli_event;
	event nlllll_event;
	event nllllO_event;
	event nlllOi_event;
	event nlllOl_event;
	event nlllOO_event;
	event nllO1i_event;
	event nllO1l_event;
	event nlO10i_event;
	event nlO10l_event;
	event nlO10O_event;
	event nlO11O_event;
	event nlO1ii_event;
	event nlO1il_event;
	event nlO1iO_event;
	event nlO1li_event;
	event nlOi0i_event;
	event nlOi0l_event;
	event nlOi0O_event;
	event nlOi1O_event;
	event nlOiii_event;
	event nlOiil_event;
	event nlOiiO_event;
	event nlOO0i_event;
	event nlOO0l_event;
	event nlOO0O_event;
	event nlOO1l_event;
	event nlOO1O_event;
	event nlOOii_event;
	event nlOOil_event;
	initial
		#1 ->n100i_event;
	initial
		#1 ->n100l_event;
	initial
		#1 ->n101l_event;
	initial
		#1 ->n101O_event;
	initial
		#1 ->n10iO_event;
	initial
		#1 ->nlllii_event;
	initial
		#1 ->nlllil_event;
	initial
		#1 ->nllliO_event;
	initial
		#1 ->nlllli_event;
	initial
		#1 ->nlllll_event;
	initial
		#1 ->nllllO_event;
	initial
		#1 ->nlllOi_event;
	initial
		#1 ->nlllOl_event;
	initial
		#1 ->nlllOO_event;
	initial
		#1 ->nllO1i_event;
	initial
		#1 ->nllO1l_event;
	initial
		#1 ->nlO10i_event;
	initial
		#1 ->nlO10l_event;
	initial
		#1 ->nlO10O_event;
	initial
		#1 ->nlO11O_event;
	initial
		#1 ->nlO1ii_event;
	initial
		#1 ->nlO1il_event;
	initial
		#1 ->nlO1iO_event;
	initial
		#1 ->nlO1li_event;
	initial
		#1 ->nlOi0i_event;
	initial
		#1 ->nlOi0l_event;
	initial
		#1 ->nlOi0O_event;
	initial
		#1 ->nlOi1O_event;
	initial
		#1 ->nlOiii_event;
	initial
		#1 ->nlOiil_event;
	initial
		#1 ->nlOiiO_event;
	initial
		#1 ->nlOO0i_event;
	initial
		#1 ->nlOO0l_event;
	initial
		#1 ->nlOO0O_event;
	initial
		#1 ->nlOO1l_event;
	initial
		#1 ->nlOO1O_event;
	initial
		#1 ->nlOOii_event;
	initial
		#1 ->nlOOil_event;
	always @(n100i_event)
		n100i <= 1;
	always @(n100l_event)
		n100l <= 1;
	always @(n101l_event)
		n101l <= 1;
	always @(n101O_event)
		n101O <= 1;
	always @(n10iO_event)
		n10iO <= 1;
	always @(nlllii_event)
		nlllii <= 1;
	always @(nlllil_event)
		nlllil <= 1;
	always @(nllliO_event)
		nllliO <= 1;
	always @(nlllli_event)
		nlllli <= 1;
	always @(nlllll_event)
		nlllll <= 1;
	always @(nllllO_event)
		nllllO <= 1;
	always @(nlllOi_event)
		nlllOi <= 1;
	always @(nlllOl_event)
		nlllOl <= 1;
	always @(nlllOO_event)
		nlllOO <= 1;
	always @(nllO1i_event)
		nllO1i <= 1;
	always @(nllO1l_event)
		nllO1l <= 1;
	always @(nlO10i_event)
		nlO10i <= 1;
	always @(nlO10l_event)
		nlO10l <= 1;
	always @(nlO10O_event)
		nlO10O <= 1;
	always @(nlO11O_event)
		nlO11O <= 1;
	always @(nlO1ii_event)
		nlO1ii <= 1;
	always @(nlO1il_event)
		nlO1il <= 1;
	always @(nlO1iO_event)
		nlO1iO <= 1;
	always @(nlO1li_event)
		nlO1li <= 1;
	always @(nlOi0i_event)
		nlOi0i <= 1;
	always @(nlOi0l_event)
		nlOi0l <= 1;
	always @(nlOi0O_event)
		nlOi0O <= 1;
	always @(nlOi1O_event)
		nlOi1O <= 1;
	always @(nlOiii_event)
		nlOiii <= 1;
	always @(nlOiil_event)
		nlOiil <= 1;
	always @(nlOiiO_event)
		nlOiiO <= 1;
	always @(nlOO0i_event)
		nlOO0i <= 1;
	always @(nlOO0l_event)
		nlOO0l <= 1;
	always @(nlOO0O_event)
		nlOO0O <= 1;
	always @(nlOO1l_event)
		nlOO1l <= 1;
	always @(nlOO1O_event)
		nlOO1O <= 1;
	always @(nlOOii_event)
		nlOOii <= 1;
	always @(nlOOil_event)
		nlOOil <= 1;
	initial
	begin
		n10li = 0;
		n1l0i = 0;
		n1l0l = 0;
		n1l0O = 0;
		n1lii = 0;
		n1lil = 0;
		n1liO = 0;
		n1lli = 0;
		n1lll = 0;
		n1llO = 0;
		n1lOi = 0;
		n1lOl = 0;
		n1lOO = 0;
		n1O0i = 0;
		n1O0l = 0;
		n1O0O = 0;
		n1O1i = 0;
		n1O1l = 0;
		n1O1O = 0;
		n1Oil = 0;
	end
	always @ ( posedge clk or  negedge wire_n1Oii_CLRN)
	begin
		if (wire_n1Oii_CLRN == 1'b0) 
		begin
			n10li <= 0;
			n1l0i <= 0;
			n1l0l <= 0;
			n1l0O <= 0;
			n1lii <= 0;
			n1lil <= 0;
			n1liO <= 0;
			n1lli <= 0;
			n1lll <= 0;
			n1llO <= 0;
			n1lOi <= 0;
			n1lOl <= 0;
			n1lOO <= 0;
			n1O0i <= 0;
			n1O0l <= 0;
			n1O0O <= 0;
			n1O1i <= 0;
			n1O1l <= 0;
			n1O1O <= 0;
			n1Oil <= 0;
		end
		else if  (n01OO == 1'b1) 
		begin
			n10li <= wire_n1OOi_o[1];
			n1l0i <= wire_n1OOi_o[2];
			n1l0l <= (~ wire_n1OOi_o[3]);
			n1l0O <= wire_n1OlO_o[1];
			n1lii <= wire_n1OlO_o[2];
			n1lil <= (~ wire_n1OlO_o[3]);
			n1liO <= wire_n1Oll_o[1];
			n1lli <= wire_n1Oll_o[2];
			n1lll <= (~ wire_n1Oll_o[3]);
			n1llO <= wire_n1Oli_o[1];
			n1lOi <= wire_n1Oli_o[2];
			n1lOl <= (~ wire_n1Oli_o[3]);
			n1lOO <= wire_n011l_o[0];
			n1O0i <= wire_n1OOO_o[0];
			n1O0l <= wire_n1OOO_o[1];
			n1O0O <= wire_n1OOl_o[0];
			n1O1i <= wire_n011l_o[1];
			n1O1l <= wire_n011i_o[0];
			n1O1O <= wire_n011i_o[1];
			n1Oil <= wire_n1OOl_o[1];
		end
	end
	assign
		wire_n1Oii_CLRN = ((nliOiO56 ^ nliOiO55) & (~ reset));
	initial
	begin
		niill = 0;
		niilO = 0;
		niiOl = 0;
		nil1i = 0;
	end
	always @ (clk or reset or wire_niiOO_CLRN)
	begin
		if (reset == 1'b1) 
		begin
			niill <= 1;
			niilO <= 1;
			niiOl <= 1;
			nil1i <= 1;
		end
		else if  (wire_niiOO_CLRN == 1'b0) 
		begin
			niill <= 0;
			niilO <= 0;
			niiOl <= 0;
			nil1i <= 0;
		end
		else if  (n01Oi == 1'b1) 
		if (clk != niiOO_clk_prev && clk == 1'b1) 
		begin
			niill <= wire_nil0l_dataout;
			niilO <= wire_nil0O_dataout;
			niiOl <= wire_nilil_dataout;
			nil1i <= wire_niliO_dataout;
		end
		niiOO_clk_prev <= clk;
	end
	assign
		wire_niiOO_CLRN = (nliOOl54 ^ nliOOl53);
	event niill_event;
	event niilO_event;
	event niiOl_event;
	event nil1i_event;
	initial
		#1 ->niill_event;
	initial
		#1 ->niilO_event;
	initial
		#1 ->niiOl_event;
	initial
		#1 ->nil1i_event;
	always @(niill_event)
		niill <= 1;
	always @(niilO_event)
		niilO <= 1;
	always @(niiOl_event)
		niiOl <= 1;
	always @(nil1i_event)
		nil1i <= 1;
	initial
	begin
		niOi = 0;
		nl00l = 0;
	end
	always @ ( posedge clk or  negedge wire_nilO_PRN)
	begin
		if (wire_nilO_PRN == 1'b0) 
		begin
			niOi <= 1;
			nl00l <= 1;
		end
		else 
		begin
			niOi <= wire_n1iO_o;
			nl00l <= wire_nliil_dataout;
		end
	end
	assign
		wire_nilO_PRN = ((nlliiO10 ^ nlliiO9) & (~ reset));
	event niOi_event;
	event nl00l_event;
	initial
		#1 ->niOi_event;
	initial
		#1 ->nl00l_event;
	always @(niOi_event)
		niOi <= 1;
	always @(nl00l_event)
		nl00l <= 1;
	initial
	begin
		ni01i = 0;
		niiOi = 0;
		nil1l = 0;
		nil1O = 0;
		nillO = 0;
		nilOi = 0;
		nilOl = 0;
		nilOO = 0;
		niO1i = 0;
		niO1O = 0;
	end
	always @ (clk or wire_niO1l_PRN or reset)
	begin
		if (wire_niO1l_PRN == 1'b0) 
		begin
			ni01i <= 1;
			niiOi <= 1;
			nil1l <= 1;
			nil1O <= 1;
			nillO <= 1;
			nilOi <= 1;
			nilOl <= 1;
			nilOO <= 1;
			niO1i <= 1;
			niO1O <= 1;
		end
		else if  (reset == 1'b1) 
		begin
			ni01i <= 0;
			niiOi <= 0;
			nil1l <= 0;
			nil1O <= 0;
			nillO <= 0;
			nilOi <= 0;
			nilOl <= 0;
			nilOO <= 0;
			niO1i <= 0;
			niO1O <= 0;
		end
		else if  (n01Oi == 1'b1) 
		if (clk != niO1l_clk_prev && clk == 1'b1) 
		begin
			ni01i <= wire_nil0i_dataout;
			niiOi <= wire_nilii_dataout;
			nil1l <= wire_nilli_dataout;
			nil1O <= wire_niO0l_dataout;
			nillO <= wire_niO0O_dataout;
			nilOi <= wire_niOii_dataout;
			nilOl <= wire_niOil_dataout;
			nilOO <= wire_niOiO_dataout;
			niO1i <= wire_niOli_dataout;
			niO1O <= wire_niOll_dataout;
		end
		niO1l_clk_prev <= clk;
	end
	assign
		wire_niO1l_PRN = (nll11i52 ^ nll11i51);
	event ni01i_event;
	event niiOi_event;
	event nil1l_event;
	event nil1O_event;
	event nillO_event;
	event nilOi_event;
	event nilOl_event;
	event nilOO_event;
	event niO1i_event;
	event niO1O_event;
	initial
		#1 ->ni01i_event;
	initial
		#1 ->niiOi_event;
	initial
		#1 ->nil1l_event;
	initial
		#1 ->nil1O_event;
	initial
		#1 ->nillO_event;
	initial
		#1 ->nilOi_event;
	initial
		#1 ->nilOl_event;
	initial
		#1 ->nilOO_event;
	initial
		#1 ->niO1i_event;
	initial
		#1 ->niO1O_event;
	always @(ni01i_event)
		ni01i <= 1;
	always @(niiOi_event)
		niiOi <= 1;
	always @(nil1l_event)
		nil1l <= 1;
	always @(nil1O_event)
		nil1O <= 1;
	always @(nillO_event)
		nillO <= 1;
	always @(nilOi_event)
		nilOi <= 1;
	always @(nilOl_event)
		nilOl <= 1;
	always @(nilOO_event)
		nilOO <= 1;
	always @(niO1i_event)
		niO1i <= 1;
	always @(niO1O_event)
		niO1O <= 1;
	initial
	begin
		niOO = 0;
		nlOOO = 0;
	end
	always @ ( posedge clk or  posedge reset)
	begin
		if (reset == 1'b1) 
		begin
			niOO <= 0;
			nlOOO <= 0;
		end
		else if  (source_rdy == 1'b1) 
		begin
			niOO <= wire_nl0i_dataout;
			nlOOO <= wire_n10l_dataout;
		end
	end
	event niOO_event;
	event nlOOO_event;
	initial
		#1 ->niOO_event;
	initial
		#1 ->nlOOO_event;
	always @(niOO_event)
		niOO <= 1;
	always @(nlOOO_event)
		nlOOO <= 1;
	initial
	begin
		n0O0i = 0;
		n0Oii = 0;
		ni10l = 0;
		ni1lO = 0;
		niOOi = 0;
		nl11l = 0;
	end
	always @ ( posedge clk or  negedge wire_nl11i_PRN)
	begin
		if (wire_nl11i_PRN == 1'b0) 
		begin
			n0O0i <= 1;
			n0Oii <= 1;
			ni10l <= 1;
			ni1lO <= 1;
			niOOi <= 1;
			nl11l <= 1;
		end
		else if  (nll1OO == 1'b1) 
		begin
			n0O0i <= wire_n0OlO_dataout;
			n0Oii <= wire_n0OOO_dataout;
			ni10l <= ((ni10l & (~ wire_n001O_q_b[0])) | (ni1li & (~ wire_n001O_q_b[2])));
			ni1lO <= ((ni1lO & (~ wire_n001l_q_b[0])) | (ni1Ol & (~ wire_n001l_q_b[2])));
			niOOi <= wire_nl1ii_dataout;
			nl11l <= wire_nl1li_dataout;
		end
	end
	assign
		wire_nl11i_PRN = ((nll11O50 ^ nll11O49) & (~ reset));
	event n0O0i_event;
	event n0Oii_event;
	event ni10l_event;
	event ni1lO_event;
	event niOOi_event;
	event nl11l_event;
	initial
		#1 ->n0O0i_event;
	initial
		#1 ->n0Oii_event;
	initial
		#1 ->ni10l_event;
	initial
		#1 ->ni1lO_event;
	initial
		#1 ->niOOi_event;
	initial
		#1 ->nl11l_event;
	always @(n0O0i_event)
		n0O0i <= 1;
	always @(n0Oii_event)
		n0Oii <= 1;
	always @(ni10l_event)
		ni10l <= 1;
	always @(ni1lO_event)
		ni1lO <= 1;
	always @(niOOi_event)
		niOOi <= 1;
	always @(nl11l_event)
		nl11l <= 1;
	initial
	begin
		n001i = 0;
		n01Oi = 0;
		n01Ol = 0;
		n01OO = 0;
		n0Oli = 0;
		n11i = 0;
		n11l = 0;
		n11O = 0;
		nili = 0;
		nill = 0;
		nl0Ol = 0;
		nl0OO = 0;
		nl1i = 0;
		nl1O = 0;
		nli1i = 0;
		nli1l = 0;
		nli1O = 0;
	end
	always @ ( posedge clk or  posedge reset)
	begin
		if (reset == 1'b1) 
		begin
			n001i <= 0;
			n01Oi <= 0;
			n01Ol <= 0;
			n01OO <= 0;
			n0Oli <= 0;
			n11i <= 0;
			n11l <= 0;
			n11O <= 0;
			nili <= 0;
			nill <= 0;
			nl0Ol <= 0;
			nl0OO <= 0;
			nl1i <= 0;
			nl1O <= 0;
			nli1i <= 0;
			nli1l <= 0;
			nli1O <= 0;
		end
		else 
		begin
			n001i <= (sink_val & nl1O);
			n01Oi <= n01Ol;
			n01Ol <= n01OO;
			n01OO <= n001i;
			n0Oli <= wire_n00ll_dataout;
			n11i <= ((source_rdy & wire_n1ll_o) & (nll01O36 ^ nll01O35));
			n11l <= wire_n10l_dataout;
			n11O <= wire_n10O_o;
			nili <= wire_n1ii_o;
			nill <= wire_n1il_o;
			nl0Ol <= wire_nliiO_dataout;
			nl0OO <= wire_nlili_dataout;
			nl1i <= wire_nl0i_dataout;
			nl1O <= (~ nlll0O);
			nli1i <= wire_nlill_dataout;
			nli1l <= wire_nlilO_dataout;
			nli1O <= wire_nliOi_dataout;
		end
	end
	event n001i_event;
	event n01Oi_event;
	event n01Ol_event;
	event n01OO_event;
	event n0Oli_event;
	event n11i_event;
	event n11l_event;
	event n11O_event;
	event nili_event;
	event nill_event;
	event nl0Ol_event;
	event nl0OO_event;
	event nl1i_event;
	event nl1O_event;
	event nli1i_event;
	event nli1l_event;
	event nli1O_event;
	initial
		#1 ->n001i_event;
	initial
		#1 ->n01Oi_event;
	initial
		#1 ->n01Ol_event;
	initial
		#1 ->n01OO_event;
	initial
		#1 ->n0Oli_event;
	initial
		#1 ->n11i_event;
	initial
		#1 ->n11l_event;
	initial
		#1 ->n11O_event;
	initial
		#1 ->nili_event;
	initial
		#1 ->nill_event;
	initial
		#1 ->nl0Ol_event;
	initial
		#1 ->nl0OO_event;
	initial
		#1 ->nl1i_event;
	initial
		#1 ->nl1O_event;
	initial
		#1 ->nli1i_event;
	initial
		#1 ->nli1l_event;
	initial
		#1 ->nli1O_event;
	always @(n001i_event)
		n001i <= 1;
	always @(n01Oi_event)
		n01Oi <= 1;
	always @(n01Ol_event)
		n01Ol <= 1;
	always @(n01OO_event)
		n01OO <= 1;
	always @(n0Oli_event)
		n0Oli <= 1;
	always @(n11i_event)
		n11i <= 1;
	always @(n11l_event)
		n11l <= 1;
	always @(n11O_event)
		n11O <= 1;
	always @(nili_event)
		nili <= 1;
	always @(nill_event)
		nill <= 1;
	always @(nl0Ol_event)
		nl0Ol <= 1;
	always @(nl0OO_event)
		nl0OO <= 1;
	always @(nl1i_event)
		nl1i <= 1;
	always @(nl1O_event)
		nl1O <= 1;
	always @(nli1i_event)
		nli1i <= 1;
	always @(nli1l_event)
		nli1l <= 1;
	always @(nli1O_event)
		nli1O <= 1;
	initial
	begin
		nl0l = 0;
		nl0O = 0;
		nlii = 0;
		nliO = 0;
	end
	always @ ( posedge clk or  negedge wire_nlil_CLRN)
	begin
		if (wire_nlil_CLRN == 1'b0) 
		begin
			nl0l <= 0;
			nl0O <= 0;
			nlii <= 0;
			nliO <= 0;
		end
		else if  (nlliOl == 1'b1) 
		begin
			nl0l <= rr[0];
			nl0O <= eras_sym[0];
			nlii <= rr[1];
			nliO <= eras_sym[1];
		end
	end
	assign
		wire_nlil_CLRN = ((nlliOi6 ^ nlliOi5) & (~ reset));
	event nl0l_event;
	event nl0O_event;
	event nlii_event;
	event nliO_event;
	initial
		#1 ->nl0l_event;
	initial
		#1 ->nl0O_event;
	initial
		#1 ->nlii_event;
	initial
		#1 ->nliO_event;
	always @(nl0l_event)
		nl0l <= 1;
	always @(nl0O_event)
		nl0O <= 1;
	always @(nlii_event)
		nlii <= 1;
	always @(nliO_event)
		nliO <= 1;
	initial
	begin
		n0lii = 0;
		n0O0l = 0;
		n0O0O = 0;
		n0Oil = 0;
		n0OiO = 0;
		ni1iO = 0;
		ni1li = 0;
		ni1ll = 0;
		ni1Oi = 0;
		ni1Ol = 0;
		ni1OO = 0;
		niO0i = 0;
		niOOl = 0;
		niOOO = 0;
		nl00i = 0;
		nl01i = 0;
		nl01l = 0;
		nl01O = 0;
		nl10i = 0;
		nl10l = 0;
		nl11O = 0;
		nl1Ol = 0;
		nl1OO = 0;
		nli0i = 0;
		nli0l = 0;
		nllll = 0;
		nlllO = 0;
		nllOi = 0;
		nllOl = 0;
		nllOO = 0;
		nlO1l = 0;
	end
	always @ (clk or wire_nlO1i_PRN or wire_nlO1i_CLRN)
	begin
		if (wire_nlO1i_PRN == 1'b0) 
		begin
			n0lii <= 1;
			n0O0l <= 1;
			n0O0O <= 1;
			n0Oil <= 1;
			n0OiO <= 1;
			ni1iO <= 1;
			ni1li <= 1;
			ni1ll <= 1;
			ni1Oi <= 1;
			ni1Ol <= 1;
			ni1OO <= 1;
			niO0i <= 1;
			niOOl <= 1;
			niOOO <= 1;
			nl00i <= 1;
			nl01i <= 1;
			nl01l <= 1;
			nl01O <= 1;
			nl10i <= 1;
			nl10l <= 1;
			nl11O <= 1;
			nl1Ol <= 1;
			nl1OO <= 1;
			nli0i <= 1;
			nli0l <= 1;
			nllll <= 1;
			nlllO <= 1;
			nllOi <= 1;
			nllOl <= 1;
			nllOO <= 1;
			nlO1l <= 1;
		end
		else if  (wire_nlO1i_CLRN == 1'b0) 
		begin
			n0lii <= 0;
			n0O0l <= 0;
			n0O0O <= 0;
			n0Oil <= 0;
			n0OiO <= 0;
			ni1iO <= 0;
			ni1li <= 0;
			ni1ll <= 0;
			ni1Oi <= 0;
			ni1Ol <= 0;
			ni1OO <= 0;
			niO0i <= 0;
			niOOl <= 0;
			niOOO <= 0;
			nl00i <= 0;
			nl01i <= 0;
			nl01l <= 0;
			nl01O <= 0;
			nl10i <= 0;
			nl10l <= 0;
			nl11O <= 0;
			nl1Ol <= 0;
			nl1OO <= 0;
			nli0i <= 0;
			nli0l <= 0;
			nllll <= 0;
			nlllO <= 0;
			nllOi <= 0;
			nllOl <= 0;
			nllOO <= 0;
			nlO1l <= 0;
		end
		else if  (nll1OO == 1'b1) 
		if (clk != nlO1i_clk_prev && clk == 1'b1) 
		begin
			n0lii <= wire_n0Oll_dataout;
			n0O0l <= wire_n0OOi_dataout;
			n0O0O <= wire_n0OOl_dataout;
			n0Oil <= wire_ni11i_dataout;
			n0OiO <= wire_ni11l_dataout;
			ni1iO <= ((ni10l & wire_n001O_q_b[0]) | (ni1li & wire_n001O_q_b[2]));
			ni1li <= ((ni1iO & (~ wire_n001O_q_b[1])) | (ni1ll & (~ wire_n001O_q_b[3])));
			ni1ll <= ((ni1iO & wire_n001O_q_b[1]) | (ni1ll & wire_n001O_q_b[3]));
			ni1Oi <= ((ni1lO & wire_n001l_q_b[0]) | (ni1Ol & wire_n001l_q_b[2]));
			ni1Ol <= ((ni1Oi & (~ wire_n001l_q_b[1])) | (ni1OO & (~ wire_n001l_q_b[3])));
			ni1OO <= ((ni1Oi & wire_n001l_q_b[1]) | (ni1OO & wire_n001l_q_b[3]));
			niO0i <= wire_nl10O_dataout;
			niOOl <= wire_nl1il_dataout;
			niOOO <= wire_nl1iO_dataout;
			nl00i <= wire_nl0lO_dataout;
			nl01i <= wire_nl0iO_dataout;
			nl01l <= wire_nl0li_dataout;
			nl01O <= wire_nl0ll_dataout;
			nl10i <= wire_nl1lO_dataout;
			nl10l <= wire_nl00O_dataout;
			nl11O <= wire_nl1ll_dataout;
			nl1Ol <= wire_nl0ii_dataout;
			nl1OO <= wire_nl0il_dataout;
			nli0i <= wire_nli0O_dataout;
			nli0l <= wire_nlO1O_dataout;
			nllll <= wire_nlO0i_dataout;
			nlllO <= wire_nlO0l_dataout;
			nllOi <= wire_nlO0O_dataout;
			nllOl <= wire_nlOii_dataout;
			nllOO <= wire_nlOil_dataout;
			nlO1l <= wire_nlOiO_dataout;
		end
		nlO1i_clk_prev <= clk;
	end
	assign
		wire_nlO1i_CLRN = ((nll1Oi42 ^ nll1Oi41) & (~ reset)),
		wire_nlO1i_PRN = (nll1lO44 ^ nll1lO43);
	or(wire_n00i_dataout, nill, (~ nlliil));
	and(wire_n00l_dataout, niOi, ~((~ nlliil)));
	assign		wire_n00ll_dataout = ((nll1OO & wire_n0ilO_dataout) === 1'b1) ? (~ n0Oli) : n0Oli;
	and(wire_n00O_dataout, wire_n0li_dataout, ~(nlli0l));
	and(wire_n01i_dataout, wire_n00l_dataout, ~((~ source_rdy)));
	and(wire_n01l_dataout, n11O, ~((~ nlliil)));
	and(wire_n01O_dataout, nili, ~((~ nlliil)));
	assign		wire_n0i0i_dataout = ((~ n0Oli) === 1'b1) ? wire_n0lil_dataout : wire_n0iOi_dataout;
	assign		wire_n0i0l_dataout = ((~ n0Oli) === 1'b1) ? wire_n0liO_dataout : wire_n0iOl_dataout;
	assign		wire_n0i0O_dataout = ((~ n0Oli) === 1'b1) ? wire_n0lli_dataout : wire_n0iOO_dataout;
	or(wire_n0ii_dataout, wire_n0ll_dataout, nlli0l);
	assign		wire_n0iii_dataout = ((~ n0Oli) === 1'b1) ? wire_n0lll_dataout : wire_n0l1i_dataout;
	assign		wire_n0iil_dataout = ((~ n0Oli) === 1'b1) ? wire_n0llO_dataout : wire_n0l1l_dataout;
	assign		wire_n0iiO_dataout = ((~ n0Oli) === 1'b1) ? wire_n0lOi_dataout : wire_n0l1O_dataout;
	and(wire_n0il_dataout, wire_n0lO_dataout, ~(nlli0l));
	assign		wire_n0ili_dataout = ((~ n0Oli) === 1'b1) ? wire_n0lOl_dataout : wire_n0l0i_dataout;
	assign		wire_n0ill_dataout = ((~ n0Oli) === 1'b1) ? wire_n0O1O_o : wire_n0O1l_o;
	assign		wire_n0ilO_dataout = ((~ n0Oli) === 1'b1) ? nliOlO : nliOOi;
	and(wire_n0iO_dataout, wire_n0Oi_dataout, ~(nlli0l));
	assign		wire_n0iOi_dataout = ((~ wire_n0O1l_o) === 1'b1) ? wire_n0l0O_o[1] : (~ n0lii);
	assign		wire_n0iOl_dataout = ((~ wire_n0O1l_o) === 1'b1) ? wire_n0l0O_o[2] : wire_n0l0l_o[1];
	assign		wire_n0iOO_dataout = ((~ wire_n0O1l_o) === 1'b1) ? wire_n0l0O_o[3] : wire_n0l0l_o[2];
	assign		wire_n0l0i_dataout = ((~ wire_n0O1l_o) === 1'b1) ? wire_n0l0O_o[7] : wire_n0l0l_o[6];
	assign		wire_n0l1i_dataout = ((~ wire_n0O1l_o) === 1'b1) ? wire_n0l0O_o[4] : wire_n0l0l_o[3];
	assign		wire_n0l1l_dataout = ((~ wire_n0O1l_o) === 1'b1) ? wire_n0l0O_o[5] : wire_n0l0l_o[4];
	assign		wire_n0l1O_dataout = ((~ wire_n0O1l_o) === 1'b1) ? wire_n0l0O_o[6] : wire_n0l0l_o[5];
	and(wire_n0li_dataout, n11O, ~(nlli1O));
	assign		wire_n0lil_dataout = ((~ wire_n0O1O_o) === 1'b1) ? wire_n0O1i_o[0] : (~ n0lii);
	assign		wire_n0liO_dataout = ((~ wire_n0O1O_o) === 1'b1) ? wire_n0O1i_o[1] : (~ n0O0i);
	and(wire_n0ll_dataout, nili, ~(nlli1O));
	assign		wire_n0lli_dataout = ((~ wire_n0O1O_o) === 1'b1) ? wire_n0O1i_o[2] : wire_n0lOO_o[1];
	assign		wire_n0lll_dataout = ((~ wire_n0O1O_o) === 1'b1) ? wire_n0O1i_o[3] : wire_n0lOO_o[2];
	assign		wire_n0llO_dataout = ((~ wire_n0O1O_o) === 1'b1) ? wire_n0O1i_o[4] : wire_n0lOO_o[3];
	or(wire_n0lO_dataout, nill, nlli1O);
	assign		wire_n0lOi_dataout = ((~ wire_n0O1O_o) === 1'b1) ? wire_n0O1i_o[5] : wire_n0lOO_o[4];
	assign		wire_n0lOl_dataout = ((~ wire_n0O1O_o) === 1'b1) ? wire_n0O1i_o[6] : wire_n0lOO_o[5];
	and(wire_n0Oi_dataout, niOi, ~(nlli1O));
	assign		wire_n0Oll_dataout = ((~ n0Oli) === 1'b1) ? wire_ni10i_o[0] : wire_ni11O_o[1];
	assign		wire_n0OlO_dataout = ((~ n0Oli) === 1'b1) ? wire_ni10i_o[1] : wire_ni11O_o[2];
	and(wire_n0OO_dataout, wire_ni0i_dataout, ~(nlli0l));
	assign		wire_n0OOi_dataout = ((~ n0Oli) === 1'b1) ? wire_ni10i_o[2] : wire_ni11O_o[3];
	assign		wire_n0OOl_dataout = ((~ n0Oli) === 1'b1) ? wire_ni10i_o[3] : wire_ni11O_o[4];
	assign		wire_n0OOO_dataout = ((~ n0Oli) === 1'b1) ? wire_ni10i_o[4] : wire_ni11O_o[5];
	assign		wire_n10l_dataout = ((~ nlll0O) === 1'b1) ? nlliil : n11l;
	or(wire_n1Oi_dataout, wire_n01l_dataout, (~ source_rdy));
	and(wire_n1Ol_dataout, wire_n01O_dataout, ~((~ source_rdy)));
	and(wire_n1OO_dataout, wire_n00i_dataout, ~((~ source_rdy)));
	or(wire_ni0i_dataout, n11O, nlli0i);
	and(wire_ni0l_dataout, nili, ~(nlli0i));
	and(wire_ni0O_dataout, nill, ~(nlli0i));
	assign		wire_ni11i_dataout = ((~ n0Oli) === 1'b1) ? wire_ni10i_o[5] : wire_ni11O_o[6];
	assign		wire_ni11l_dataout = ((~ n0Oli) === 1'b1) ? wire_ni10i_o[6] : wire_ni11O_o[7];
	or(wire_ni1i_dataout, wire_ni0l_dataout, nlli0l);
	and(wire_ni1l_dataout, wire_ni0O_dataout, ~(nlli0l));
	and(wire_ni1O_dataout, wire_niii_dataout, ~(nlli0l));
	and(wire_niii_dataout, niOi, ~(nlli0i));
	and(wire_nil0i_dataout, wire_nilll_o[0], ~(nliOOO));
	and(wire_nil0l_dataout, wire_nilll_o[1], ~(nliOOO));
	and(wire_nil0O_dataout, wire_nilll_o[2], ~(nliOOO));
	and(wire_nilii_dataout, wire_nilll_o[3], ~(nliOOO));
	and(wire_nilil_dataout, wire_nilll_o[4], ~(nliOOO));
	and(wire_niliO_dataout, wire_nilll_o[5], ~(nliOOO));
	and(wire_nilli_dataout, wire_nilll_o[6], ~(nliOOO));
	and(wire_niO0l_dataout, wire_niOlO_o[0], ~(nll11l));
	and(wire_niO0O_dataout, wire_niOlO_o[1], ~(nll11l));
	and(wire_niOii_dataout, wire_niOlO_o[2], ~(nll11l));
	and(wire_niOil_dataout, wire_niOlO_o[3], ~(nll11l));
	and(wire_niOiO_dataout, wire_niOlO_o[4], ~(nll11l));
	and(wire_niOli_dataout, wire_niOlO_o[5], ~(nll11l));
	and(wire_niOll_dataout, wire_niOlO_o[6], ~(nll11l));
	or(wire_nl00O_dataout, wire_nl0Oi_o[1], nll10l);
	assign		wire_nl0i_dataout = ((~ nlll0O) === 1'b1) ? ((nli0i & wire_n000i_q_b[0]) & (nllili8 ^ nllili7)) : nl1i;
	or(wire_nl0ii_dataout, wire_nl0Oi_o[2], nll10l);
	or(wire_nl0il_dataout, wire_nl0Oi_o[3], nll10l);
	and(wire_nl0iO_dataout, wire_nl0Oi_o[4], ~(nll10l));
	and(wire_nl0li_dataout, wire_nl0Oi_o[5], ~(nll10l));
	and(wire_nl0ll_dataout, wire_nl0Oi_o[6], ~(nll10l));
	or(wire_nl0lO_dataout, wire_nl0Oi_o[7], nll10l);
	or(wire_nl10O_dataout, wire_nl1Oi_o[1], nll10i);
	or(wire_nl1ii_dataout, wire_nl1Oi_o[2], nll10i);
	or(wire_nl1il_dataout, wire_nl1Oi_o[3], nll10i);
	and(wire_nl1iO_dataout, wire_nl1Oi_o[4], ~(nll10i));
	and(wire_nl1li_dataout, wire_nl1Oi_o[5], ~(nll10i));
	and(wire_nl1ll_dataout, wire_nl1Oi_o[6], ~(nll10i));
	or(wire_nl1lO_dataout, wire_nl1Oi_o[7], nll10i);
	or(wire_nli0O_dataout, nli0i, (wire_nllli_o & (~ nli0i)));
	and(wire_nliil_dataout, wire_nliOl_dataout, ~(nll1ii));
	assign		wire_nliiO_dataout = (nll1ii === 1'b1) ? nl00l : wire_nliOO_dataout;
	assign		wire_nlili_dataout = (nll1ii === 1'b1) ? nl0Ol : wire_nll1i_dataout;
	assign		wire_nlill_dataout = (nll1ii === 1'b1) ? nl0OO : wire_nll1l_dataout;
	assign		wire_nlilO_dataout = (nll1ii === 1'b1) ? nli1i : wire_nll1O_dataout;
	assign		wire_nliOi_dataout = (nll1ii === 1'b1) ? nli1l : wire_nll0i_dataout;
	assign		wire_nliOl_dataout = (nll10O === 1'b1) ? nl0Ol : nl00l;
	assign		wire_nliOO_dataout = (nll10O === 1'b1) ? nl0OO : nl0Ol;
	and(wire_nll0i_dataout, nli1O, ~(nll10O));
	assign		wire_nll1i_dataout = (nll10O === 1'b1) ? nli1i : nl0OO;
	assign		wire_nll1l_dataout = (nll10O === 1'b1) ? nli1l : nli1i;
	assign		wire_nll1O_dataout = (nll10O === 1'b1) ? nli1O : nli1l;
	assign		wire_nllO0i_dataout = (nllO1i === 1'b1) ? wire_nllOll_o[1] : nlllii;
	assign		wire_nllO0l_dataout = (nllO1i === 1'b1) ? wire_nllOll_o[2] : nlllil;
	assign		wire_nllO0O_dataout = (nllO1i === 1'b1) ? wire_nllOll_o[3] : nllliO;
	assign		wire_nllO1O_dataout = (nllO1i === 1'b1) ? wire_nllOll_o[0] : nlO1iO;
	assign		wire_nllOii_dataout = (nllO1i === 1'b1) ? wire_nllOll_o[4] : nlllli;
	assign		wire_nllOil_dataout = (nllO1i === 1'b1) ? wire_nllOll_o[5] : nlllll;
	assign		wire_nllOiO_dataout = (nllO1i === 1'b1) ? wire_nllOll_o[6] : nllllO;
	assign		wire_nllOli_dataout = (nllO1i === 1'b1) ? wire_nllOll_o[7] : nlllOi;
	assign		wire_nlO0i_dataout = ((~ wire_nllli_o) === 1'b1) ? wire_nlOli_o[1] : nllll;
	assign		wire_nlO0l_dataout = ((~ wire_nllli_o) === 1'b1) ? wire_nlOli_o[2] : nlllO;
	assign		wire_nlO0O_dataout = ((~ wire_nllli_o) === 1'b1) ? wire_nlOli_o[3] : nllOi;
	assign		wire_nlO1O_dataout = ((~ wire_nllli_o) === 1'b1) ? wire_nlOli_o[0] : nli0l;
	assign		wire_nlOii_dataout = ((~ wire_nllli_o) === 1'b1) ? wire_nlOli_o[4] : nllOl;
	assign		wire_nlOil_dataout = ((~ wire_nllli_o) === 1'b1) ? wire_nlOli_o[5] : nllOO;
	assign		wire_nlOiO_dataout = ((~ wire_nllli_o) === 1'b1) ? wire_nlOli_o[6] : nlO1l;
	oper_add   n011i
	( 
	.a({1'b0, ((~ n01iO) & n1OiO)}),
	.b({1'b0, (~ nliOll)}),
	.cin(1'b0),
	.cout(),
	.o(wire_n011i_o));
	defparam
		n011i.sgate_representation = 0,
		n011i.width_a = 2,
		n011i.width_b = 2,
		n011i.width_o = 2;
	oper_add   n011l
	( 
	.a({1'b0, (~ nliOli)}),
	.b({1'b0, (~ nliOll)}),
	.cin(1'b0),
	.cout(),
	.o(wire_n011l_o));
	defparam
		n011l.sgate_representation = 0,
		n011l.width_a = 2,
		n011l.width_b = 2,
		n011l.width_o = 2;
	oper_add   n0l0l
	( 
	.a({(~ n0OiO), (~ n0Oil), (~ n0Oii), (~ n0O0O), (~ n0O0l), (~ n0O0i), 1'b1}),
	.b({1'b0, 1'b1, {2{1'b0}}, 1'b1, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0l0l_o));
	defparam
		n0l0l.sgate_representation = 0,
		n0l0l.width_a = 7,
		n0l0l.width_b = 7,
		n0l0l.width_o = 7;
	oper_add   n0l0O
	( 
	.a({n0OiO, n0Oil, n0Oii, n0O0O, n0O0l, n0O0i, n0lii, 1'b1}),
	.b({{6{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0l0O_o));
	defparam
		n0l0O.sgate_representation = 0,
		n0l0O.width_a = 8,
		n0l0O.width_b = 8,
		n0l0O.width_o = 8;
	oper_add   n0lOO
	( 
	.a({(~ n0OiO), (~ n0Oil), (~ n0Oii), (~ n0O0O), (~ n0O0l), 1'b1}),
	.b({1'b0, 1'b1, {3{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0lOO_o));
	defparam
		n0lOO.sgate_representation = 0,
		n0lOO.width_a = 6,
		n0lOO.width_b = 6,
		n0lOO.width_o = 6;
	oper_add   n0O1i
	( 
	.a({n0OiO, n0Oil, n0Oii, n0O0O, n0O0l, n0O0i, n0lii}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0O1i_o));
	defparam
		n0O1i.sgate_representation = 0,
		n0O1i.width_a = 7,
		n0O1i.width_b = 7,
		n0O1i.width_o = 7;
	oper_add   n11lO
	( 
	.a({{2{(~ wire_nlO0OO_o[6])}}, wire_nlO0OO_o[5:0]}),
	.b({{6{n1lil}}, n1lii, n1l0O}),
	.cin(1'b0),
	.cout(),
	.o(wire_n11lO_o));
	defparam
		n11lO.sgate_representation = 0,
		n11lO.width_a = 8,
		n11lO.width_b = 8,
		n11lO.width_o = 8;
	oper_add   n11Oi
	( 
	.a({{4{1'b0}}, n1O0l, n1O0i}),
	.b({nliO1O, nlO1ii, nlO10O, nlO10l, nlO10i, nlO11O}),
	.cin(1'b0),
	.cout(),
	.o(wire_n11Oi_o));
	defparam
		n11Oi.sgate_representation = 0,
		n11Oi.width_a = 6,
		n11Oi.width_b = 6,
		n11Oi.width_o = 6;
	oper_add   n11Ol
	( 
	.a({{4{1'b0}}, n1O1O, n1O1l}),
	.b({nliO0i, nlOiii, nlOi0O, nlOi0l, nlOi0i, nlOi1O}),
	.cin(1'b0),
	.cout(),
	.o(wire_n11Ol_o));
	defparam
		n11Ol.sgate_representation = 0,
		n11Ol.width_a = 6,
		n11Ol.width_b = 6,
		n11Ol.width_o = 6;
	oper_add   n1iOl
	( 
	.a({{2{(~ wire_nlOlOl_o[6])}}, wire_nlOlOl_o[5:0]}),
	.b({{6{n1l0l}}, n1l0i, n10li}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1iOl_o));
	defparam
		n1iOl.sgate_representation = 0,
		n1iOl.width_a = 8,
		n1iOl.width_b = 8,
		n1iOl.width_o = 8;
	oper_add   n1iOO
	( 
	.a({{4{1'b0}}, n1Oil, n1O0O}),
	.b({nliOii, nlOO0O, nlOO0l, nlOO0i, nlOO1O, nlOO1l}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1iOO_o));
	defparam
		n1iOO.sgate_representation = 0,
		n1iOO.width_a = 6,
		n1iOO.width_b = 6,
		n1iOO.width_o = 6;
	oper_add   n1l1i
	( 
	.a({{4{1'b0}}, n1O1i, n1lOO}),
	.b({nliOil, n10ii, n100l, n100i, n101O, n101l}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1l1i_o));
	defparam
		n1l1i.sgate_representation = 0,
		n1l1i.width_a = 6,
		n1l1i.width_b = 6,
		n1l1i.width_o = 6;
	oper_add   n1Oli
	( 
	.a({1'b0, wire_n1OOO_o[1:0], 1'b1}),
	.b({1'b0, (~ wire_n011i_o[1]), (~ wire_n011i_o[0]), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1Oli_o));
	defparam
		n1Oli.sgate_representation = 0,
		n1Oli.width_a = 4,
		n1Oli.width_b = 4,
		n1Oli.width_o = 4;
	oper_add   n1Oll
	( 
	.a({1'b0, wire_n1OOl_o[1:0], 1'b1}),
	.b({1'b0, (~ wire_n011l_o[1]), (~ wire_n011l_o[0]), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1Oll_o));
	defparam
		n1Oll.sgate_representation = 0,
		n1Oll.width_a = 4,
		n1Oll.width_b = 4,
		n1Oll.width_o = 4;
	oper_add   n1OlO
	( 
	.a({1'b0, wire_n011i_o[1:0], 1'b1}),
	.b({1'b0, (~ wire_n1OOO_o[1]), (~ wire_n1OOO_o[0]), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1OlO_o));
	defparam
		n1OlO.sgate_representation = 0,
		n1OlO.width_a = 4,
		n1OlO.width_b = 4,
		n1OlO.width_o = 4;
	oper_add   n1OOi
	( 
	.a({1'b0, wire_n011l_o[1:0], 1'b1}),
	.b({1'b0, (~ wire_n1OOl_o[1]), (~ wire_n1OOl_o[0]), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1OOi_o));
	defparam
		n1OOi.sgate_representation = 0,
		n1OOi.width_a = 4,
		n1OOi.width_b = 4,
		n1OOi.width_o = 4;
	oper_add   n1OOl
	( 
	.a({1'b0, ((~ n01iO) & n1OiO)}),
	.b({1'b0, ((~ n01lO) & n01li)}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1OOl_o));
	defparam
		n1OOl.sgate_representation = 0,
		n1OOl.width_a = 2,
		n1OOl.width_b = 2,
		n1OOl.width_o = 2;
	oper_add   n1OOO
	( 
	.a({1'b0, (~ nliOli)}),
	.b({1'b0, ((~ n01lO) & n01li)}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1OOO_o));
	defparam
		n1OOO.sgate_representation = 0,
		n1OOO.width_a = 2,
		n1OOO.width_b = 2,
		n1OOO.width_o = 2;
	oper_add   ni10i
	( 
	.a({n0OiO, n0Oil, n0Oii, n0O0O, n0O0l, n0O0i, n0lii}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_ni10i_o));
	defparam
		ni10i.sgate_representation = 0,
		ni10i.width_a = 7,
		ni10i.width_b = 7,
		ni10i.width_o = 7;
	oper_add   ni11O
	( 
	.a({n0OiO, n0Oil, n0Oii, n0O0O, n0O0l, n0O0i, n0lii, 1'b1}),
	.b({{6{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_ni11O_o));
	defparam
		ni11O.sgate_representation = 0,
		ni11O.width_a = 8,
		ni11O.width_b = 8,
		ni11O.width_o = 8;
	oper_add   nilll
	( 
	.a({nil1l, nil1i, niiOl, niiOi, niilO, niill, ni01i}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nilll_o));
	defparam
		nilll.sgate_representation = 0,
		nilll.width_a = 7,
		nilll.width_b = 7,
		nilll.width_o = 7;
	oper_add   niOlO
	( 
	.a({niO1O, niO1i, nilOO, nilOl, nilOi, nillO, nil1O}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_niOlO_o));
	defparam
		niOlO.sgate_representation = 0,
		niOlO.width_a = 7,
		niOlO.width_b = 7,
		niOlO.width_o = 7;
	oper_add   nl0Oi
	( 
	.a({nl00i, nl01O, nl01l, nl01i, nl1OO, nl1Ol, nl10l, 1'b1}),
	.b({{6{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nl0Oi_o));
	defparam
		nl0Oi.sgate_representation = 0,
		nl0Oi.width_a = 8,
		nl0Oi.width_b = 8,
		nl0Oi.width_o = 8;
	oper_add   nl1Oi
	( 
	.a({nl10i, nl11O, nl11l, niOOO, niOOl, niOOi, niO0i, 1'b1}),
	.b({{6{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nl1Oi_o));
	defparam
		nl1Oi.sgate_representation = 0,
		nl1Oi.width_a = 8,
		nl1Oi.width_b = 8,
		nl1Oi.width_o = 8;
	oper_add   nllOll
	( 
	.a({nlllOi, nllllO, nlllll, nlllli, nllliO, nlllil, nlllii, nlO1iO}),
	.b({{7{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nllOll_o));
	defparam
		nllOll.sgate_representation = 0,
		nllOll.width_a = 8,
		nllOll.width_b = 8,
		nllOll.width_o = 8;
	oper_add   nlO0Ol
	( 
	.a({{2{(~ wire_nlO0OO_o[6])}}, wire_nlO0OO_o[5:0]}),
	.b({{6{n1lOl}}, n1lOi, n1llO}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlO0Ol_o));
	defparam
		nlO0Ol.sgate_representation = 0,
		nlO0Ol.width_a = 8,
		nlO0Ol.width_b = 8,
		nlO0Ol.width_o = 8;
	oper_add   nlO0OO
	( 
	.a({1'b0, nlOiil, nlOiii, nlOi0O, nlOi0l, nlOi0i, nlOi1O}),
	.b({1'b0, (~ nlO1il), (~ nlO1ii), (~ nlO10O), (~ nlO10l), (~ nlO10i), (~ nlO11O)}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlO0OO_o));
	defparam
		nlO0OO.sgate_representation = 0,
		nlO0OO.width_a = 7,
		nlO0OO.width_b = 7,
		nlO0OO.width_o = 7;
	oper_add   nlOi1i
	( 
	.a({{4{1'b0}}, n1O1O, n1O1l}),
	.b({nliO1O, nlO1ii, nlO10O, nlO10l, nlO10i, nlO11O}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOi1i_o));
	defparam
		nlOi1i.sgate_representation = 0,
		nlOi1i.width_a = 6,
		nlOi1i.width_b = 6,
		nlOi1i.width_o = 6;
	oper_add   nlOi1l
	( 
	.a({{4{1'b0}}, n1O0l, n1O0i}),
	.b({nliO0i, nlOiii, nlOi0O, nlOi0l, nlOi0i, nlOi1O}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOi1l_o));
	defparam
		nlOi1l.sgate_representation = 0,
		nlOi1l.width_a = 6,
		nlOi1l.width_b = 6,
		nlOi1l.width_o = 6;
	oper_add   nlOli
	( 
	.a({nlO1l, nllOO, nllOl, nllOi, nlllO, nllll, ((nll1Ol40 ^ nll1Ol39) & nli0l)}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOli_o));
	defparam
		nlOli.sgate_representation = 0,
		nlOli.width_a = 7,
		nlOli.width_b = 7,
		nlOli.width_o = 7;
	oper_add   nlOlOi
	( 
	.a({{2{(~ wire_nlOlOl_o[6])}}, wire_nlOlOl_o[5:0]}),
	.b({{6{n1lll}}, n1lli, n1liO}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOlOi_o));
	defparam
		nlOlOi.sgate_representation = 0,
		nlOlOi.width_a = 8,
		nlOlOi.width_b = 8,
		nlOlOi.width_o = 8;
	oper_add   nlOlOl
	( 
	.a({1'b0, n10iO, n10ii, n100l, n100i, n101O, n101l}),
	.b({1'b0, (~ nlOOii), (~ nlOO0O), (~ nlOO0l), (~ nlOO0i), (~ nlOO1O), (~ nlOO1l)}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOlOl_o));
	defparam
		nlOlOl.sgate_representation = 0,
		nlOlOl.width_a = 7,
		nlOlOl.width_b = 7,
		nlOlOl.width_o = 7;
	oper_add   nlOlOO
	( 
	.a({{4{1'b0}}, n1O1i, n1lOO}),
	.b({nliOii, nlOO0O, nlOO0l, nlOO0i, nlOO1O, nlOO1l}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOlOO_o));
	defparam
		nlOlOO.sgate_representation = 0,
		nlOlOO.width_a = 6,
		nlOlOO.width_b = 6,
		nlOlOO.width_o = 6;
	oper_add   nlOO1i
	( 
	.a({{4{1'b0}}, n1Oil, n1O0O}),
	.b({nliOil, n10ii, n100l, n100i, n101O, n101l}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOO1i_o));
	defparam
		nlOO1i.sgate_representation = 0,
		nlOO1i.width_a = 6,
		nlOO1i.width_b = 6,
		nlOO1i.width_o = 6;
	oper_less_than   n0O1l
	( 
	.a({n0OiO, n0Oil, n0Oii, n0O0O, n0O0l, n0O0i, n0lii}),
	.b({{2{1'b0}}, 1'b1, {2{1'b0}}, 1'b1, 1'b0}),
	.cin(1'b1),
	.o(wire_n0O1l_o));
	defparam
		n0O1l.sgate_representation = 0,
		n0O1l.width_a = 7,
		n0O1l.width_b = 7;
	oper_less_than   n0O1O
	( 
	.a({{2{1'b0}}, 1'b1, {2{1'b0}}, 1'b1, 1'b0}),
	.b({n0OiO, n0Oil, n0Oii, n0O0O, n0O0l, n0O0i, n0lii}),
	.cin(1'b1),
	.o(wire_n0O1O_o));
	defparam
		n0O1O.sgate_representation = 0,
		n0O1O.width_a = 7,
		n0O1O.width_b = 7;
	oper_less_than   nllli
	( 
	.a({1'b1, {3{1'b0}}, {2{1'b1}}, 1'b0}),
	.b({nlO1l, nllOO, nllOl, nllOi, ((nll1li48 ^ nll1li47) & nlllO), ((nll1ll46 ^ nll1ll45) & nllll), nli0l}),
	.cin(1'b1),
	.o(wire_nllli_o));
	defparam
		nllli.sgate_representation = 0,
		nllli.width_a = 7,
		nllli.width_b = 7;
	oper_selector   n10O
	( 
	.data({1'b0, wire_n0OO_dataout, ((nll00l34 ^ nll00l33) & wire_n00O_dataout), wire_n1Oi_dataout}),
	.o(wire_n10O_o),
	.sel({((nll00O32 ^ nll00O31) & niOi), ((nll0ii30 ^ nll0ii29) & nill), n11O, nili}));
	defparam
		n10O.width_data = 4,
		n10O.width_sel = 4;
	oper_selector   n1ii
	( 
	.data({1'b0, wire_ni1i_dataout, wire_n0ii_dataout, wire_n1Ol_dataout}),
	.o(wire_n1ii_o),
	.sel({niOi, nill, n11O, nili}));
	defparam
		n1ii.width_data = 4,
		n1ii.width_sel = 4;
	oper_selector   n1il
	( 
	.data({1'b1, wire_ni1l_dataout, wire_n0il_dataout, wire_n1OO_dataout}),
	.o(wire_n1il_o),
	.sel({((nll0il28 ^ nll0il27) & niOi), nill, n11O, nili}));
	defparam
		n1il.width_data = 4,
		n1il.width_sel = 4;
	oper_selector   n1iO
	( 
	.data({1'b0, ((nll0iO26 ^ nll0iO25) & wire_ni1O_dataout), wire_n0iO_dataout, ((nll0li24 ^ nll0li23) & wire_n01i_dataout)}),
	.o(wire_n1iO_o),
	.sel({niOi, ((nll0ll22 ^ nll0ll21) & nill), ((nll0lO20 ^ nll0lO19) & n11O), nili}));
	defparam
		n1iO.width_data = 4,
		n1iO.width_sel = 4;
	oper_selector   n1ll
	( 
	.data({1'b0, ((nll0OO16 ^ nll0OO15) & nlliil), 1'b1}),
	.o(wire_n1ll_o),
	.sel({niOi, ((nill | nili) | (~ (nlli1i14 ^ nlli1i13))), n11O}));
	defparam
		n1ll.width_data = 3,
		n1ll.width_sel = 3;
	assign
		decbit = niOO,
		nliO0i = (nlOiil & (~ nllO1i)),
		nliO1O = (nlO1il & (~ nllO1i)),
		nliOii = (nlOOii & (~ nllO1i)),
		nliOil = (n10iO & (~ nllO1i)),
		nliOli = (n01iO | n1OiO),
		nliOll = (n01lO | n01li),
		nliOlO = (((((((~ n0OiO) & n0Oil) & (~ n0Oii)) & (~ n0O0O)) & (~ n0O0l)) & n0O0i) & n0lii),
		nliOOi = (((((((~ n0OiO) & (~ n0Oil)) & (~ n0Oii)) & (~ n0O0O)) & (~ n0O0l)) & (~ n0O0i)) & n0lii),
		nliOOO = ((((((nil1l & (~ nil1i)) & (~ niiOl)) & (~ niiOi)) & niilO) & niill) & ni01i),
		nll10i = (((((((~ nl10i) & (~ nl11O)) & (~ nl11l)) & (~ niOOO)) & (~ niOOl)) & (~ niOOi)) & (~ niO0i)),
		nll10l = (((((((~ nl00i) & (~ nl01O)) & (~ nl01l)) & (~ nl01i)) & (~ nl1OO)) & (~ nl1Ol)) & (~ nl10l)),
		nll10O = (((~ nll1iO) & nll1il) & (~ nl00l)),
		nll11l = ((((((niO1O & (~ niO1i)) & (~ nilOO)) & (~ nilOl)) & nilOi) & nillO) & nil1O),
		nll1ii = ((nll1iO & (~ nll1il)) & (~ nli1O)),
		nll1il = ((~ n01Oi) & (~ nlll0O)),
		nll1iO = (n01Oi & nlll0O),
		nll1OO = ((((n01Oi & nl00l) | (~ nl00l)) & (~ nlll0O)) & (nll01i38 ^ nll01i37)),
		nlli0i = ((~ source_rdy) & nlliil),
		nlli0l = ((source_rdy & nlliil) & (nlli0O12 ^ nlli0O11)),
		nlli1O = (source_rdy & (~ nlliil)),
		nlliil = (nli0i & (~ (nl00l & nll1il))),
		nllilO = 1'b1,
		nlliOl = ((sink_val & nl1O) & (nlliOO4 ^ nlliOO3)),
		nlll0O = ((niOi | n11O) | (~ (nll0Oi18 ^ nll0Oi17))),
		normalizations = {nlllOi, nllllO, nlllll, nlllli, nllliO, nlllil, nlllii, nlO1iO},
		sink_rdy = (~ nlll0O),
		source_val = ((n11i & nlOOO) & (nlll1l2 ^ nlll1l1));
endmodule //viterbi
//synopsys translate_on
//VALID FILE
